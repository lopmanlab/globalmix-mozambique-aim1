---
title: "Globalmix Mozambique analysis"
author: "M. C. Kiti"
highlight-style: pygments
prefer-html: true
format:
  docx:
    toc: true
    toc-depth: 3
    number-sections: true
    fig-align: left
    fig-dpi: 300
    
  #html:
    #toc: true
    #toc-location: left
    #number-sections: true
    #toc-depth: 2
    #code-fold: false
    #fig-align: left
execute: 
  echo: false
  warning: false
editor: visual
date: today
---

```{r}
#| label: load-environment
#| include: false
#| warning: false

rm(list=ls())
source("../scripts/00_load_libraries.R")

# install orca to save plotly plots: https://github.com/plotly/orca#installation
#  
if (!require("processx")) install.packages("processx")

participants <- readRDS("../data/clean/participant_data_aim1.RDS") 
contacts <- readRDS("../data/clean/contact_data_aim1.RDS") 



# set color themes
cols_site <- c("#1f77b4", "#ff7f0e")
cols_sex <- c("#9467bd", "#aec7e8") #c ("#ef8a62", "#67a9cf")
cols_week <- c("#8c564b", "#7f7f7f", "#d62728", "#17becf", "#e377c2", "#bcbd22", "#800080")

# custom plot text theme
axis_text_theme <- theme(
  #   theme(plot.title = element_text(size = 14), 
  axis.title.x = element_text(size=18, face="bold"),
  axis.title.y = element_text(size=16, face="bold"),
  axis.text.x = element_text(size = 12, angle=0, hjust = 1),
  axis.text.y = element_text(size= 12))
```

# Background {#sec-background}

This is a summary of results from analysis of GlobalMix data collected in Mozambique. The project had two aims: 1. quantify social contact patterns among individuals data using paper diaries 2. quantify social contact patter within households using paper diaries and wearable proximity sensors. This analysis focuses on aim 1 only.

# Methods

## Study objectives

## Study design and site

This was a cross-sectional study conducted in Mozambique. Data were collected between April 2020 and April 2021. study will be implemented in one rural and one urban area of Mozambique. The rural area will cover the Manhiça Health and Demographic Surveillance Site (Manhiça HDSS) located in the district of Manhiça, Maputo province, while the urban area will cover the Polana Caniço HDSS located in Maputo City. The Manhiça HDSS is located in about 80 km north of Maputo City, Mozambique's capital. It was established in 1996 and currently comprises about 201,000 individuals registered as permanent residents distributed in about 45,300 households. The Polana Caniço HDSS was established in 2018 and partly covers the third most populated urban district of KaMaxaquene in Maputo city. The urban HDSS has a population of approximately 92,000 inhabitants.

## Sample size

We framed our sample size calculations to detect sufficient precision in the age-group of greatest interest (infants). We powered each age group to have a standard deviation consistent with the precision in the estimate of youngest age group (0-4 years) in the POLYMOD study: standard deviation = 7.65 contacts per day (95% CI 8.2-12.2 contacts per day). We chose to base our sample size calculation on the youngest age group because infants less than six months of age represent the smallest fraction of the overall population size and are traditionally the most difficult population to enroll. We then inflated the sample size by ten percent for each age group to account for participants not completing the surveys. This resulted in a sample size of 63 per age group, 630 per site, and 1260 for in total.

## Data collection tools and procedures

Data were collected using a paper diary and an electronic diary. We defined a social contact as either 1) Physical, a 2-way face-to-face interaction between two or more individuals standing at arm's length of each other and involving touch (skin-to-skin or over clothes) or 2) non-physical contact, a 2-way face-to-face conversation between two or more individuals standing at arm's length of each other with no physical barrier between them.

Field staff will recruit the potential participants that were identified through the quota-based sampling via household visits. After initial contact is made, study staff will obtain written consent (via signature or thumb impression, in case the study participant is unable to read and write) and enroll the participant after providing a detailed explanation of the study. The field staff will explain that participants will have to complete two surveys over two consecutive days (each at the end of a 24-hour period to account for individual variation). Once enrolled, the field staff will randomly assign the participant two consecutive days of the week, using the enumeration code. The participant will be coached on how to complete the survey correctly one or two days before the selected day (please see the attached survey sample). Field staff will also collect information on the employment status, education level, household composition, age, birth order and gender of the participant as well as GPS data on the location of the household.13 After the completion of the two contact diary surveys, field staff will conduct an exit interview where field staff will check questionnaire for completeness and inconsistencies and make sure all required information is included. In addition, we will collect data on predictors of infectious disease transmission including information on food handling, handwashing and latrine use practices for each participant, ventilation and water source, as well as animal contact by household members. \## Data analysis

## Ethical considerations

This study was be conducted in accordance with the protocol, current Declaration of Helsinki, current GCP Guidelines and all applicable regulatory requirements in Mozambique, including the relevant national and local regulatory bodies having jurisdiction.The investigators or appropriately delegated site study staff shall be responsible for obtaining written informed consent from each participant prior to any data collection. Individuals equal or older than 18 years of age will provide individual consent. For individuals less than 18 years old, consent will be sought from the head of household and parent/legal guardian who is above the age of 18 years. Children 12-17 years old will also be asked to provide written assent. For individuals who do not have the capacity to provide consent, this will be sought from the head of household or parent/legal guardian. If either is absent during the household visit, the subject without capacity to provide individual consent will be excluded. In accordance with GCP Guidelines, the participant shall write his or her own name and date before signing the document. For illiterate participants and minors, the process shall be in accordance with that outlined by the GCP Guidelines, i.e. the participant will make a mark, preferably a thumbprint, on the consent form and a witness will attest to the informed consent process and participant's voluntary consent. The original document shall be filed and maintained as part of the Investigator Site records and a copy shall be provided to the participant.

# Results {#sec-results}

```{r additional-cleaning}
#| include: false
#| warning: false
#| echo: false

## Subset contacts to the IDs in participant list only
contacts <- contacts %>%
              dplyr::filter(rec_id %in% unlist(participants$rec_id))

# Filter contact relationship == self (you cannot have a contact with yourself)
contacts <- contacts %>%
  dplyr::filter(hh_member_relationship != "Self")



# relationship
contacts$hh_membership <- factor(contacts$hh_membership,
                                          levels = c("Member", "Non-member"))


# recategorize contact locations
contacts <- contacts %>%
              mutate(cnt_home = ifelse(location_contact___0==1, 1,0),
                     cnt_school = ifelse(location_contact___2==1, 1,0),
                     cnt_work = ifelse(location_contact___3==1, 1,0),
                     cnt_otherplace = ifelse(location_contact___1==1 | 
                                               location_contact___4==1 | 
                                               location_contact___5==1 | 
                                               location_contact___6==1 | 
                                               location_contact___7==1 |
                                               location_contact___8==1 | 
                                               location_contact___9==1 |
                                               location_contact___10==1 | 
                                               location_contact___11==1,1,0))
# masking
contacts <- contacts %>%
  mutate(contact_mask2 = case_when(contact_mask == "Yes, for the entire encounter" ~ "Yes",
                                   contact_mask == "Yes, during parts of encounter" ~ "Yes",
                                   contact_mask == "No mask was worn during the encounter" ~ "No",
                                   TRUE ~ "Can't recall"))
contacts$contact_mask2 <- factor(contacts$contact_mask2, levels = c("Yes", "No",
                                                                    "Can't recall"))

contacts$cnt_home <- factor(contacts$cnt_home, levels = c(1, 0),
                            labels = c("Yes", "No"))
contacts$cnt_work <- factor(contacts$cnt_work, levels = c(1, 0),
                            labels = c("Yes", "No"))
contacts$cnt_school <- factor(contacts$cnt_school, levels = c(1, 0),
                            labels = c("Yes", "No"))
contacts$cnt_otherplace <- factor(contacts$cnt_otherplace, levels = c(1, 0),
                            labels = c("Yes", "No"))

# generate data strata by COVID-19 period
## Looks like some issues with this where surveydate not matching exactly with Day 1 or2
# first_survey_date <- contacts %>%
#   dplyr::select(rec_id, "survey_date") %>%
#   dplyr::arrange(rec_id, "survey_date") %>%
#   dplyr::group_by(rec_id) %>%
#   slice(n=1) %>%
#   dplyr::rename(dt_diaryd1 = survey_date) %>%
#   mutate(pand_period = case_when(dt_diaryd1 <= as.Date("2021-6-1") ~ "lull1",
#                                  dt_diaryd1 <= as.Date("2021-7-31") ~ "inc_delta",
#                                  dt_diaryd1 <= as.Date("2021-9-28") ~ "dec_delta",
#                                  dt_diaryd1 <= as.Date("2021-12-8") ~ "lull2",
#                                  dt_diaryd1 <= as.Date("2022-1-6") ~ "inc_omi",
#                                  dt_diaryd1 <= as.Date("2022-2-6") ~ "dec_omi",
#                                  dt_diaryd1 <= as.Date("2022-6-1") ~ "lull3",
#                                  TRUE ~ NA_character_),
#          pand_period_simp = case_when(dt_diaryd1 <= as.Date("2021-6-1") ~ "lull",
#                                       dt_diaryd1 <= as.Date("2021-7-31") ~ "wave",
#                                       dt_diaryd1 <= as.Date("2021-9-28") ~ "wave",
#                                       dt_diaryd1 <= as.Date("2021-12-8") ~ "lull",
#                                       dt_diaryd1 <= as.Date("2022-1-6") ~ "wave",
#                                       dt_diaryd1 <= as.Date("2022-2-6") ~ "wave",
#                                       dt_diaryd1 <= as.Date("2022-6-1") ~ "lull",
#                                       TRUE ~ NA_character_),
#          
#          pand_period_simp1 = case_when(
#            dt_diaryd1 <= as.Date("2021-6-1") ~ "lull",
#            dt_diaryd1 <= as.Date("2021-7-31") ~ "inc",
#            dt_diaryd1 <= as.Date("2021-9-28") ~ "dec",
#            dt_diaryd1 <= as.Date("2021-12-8") ~ "lull",
#            dt_diaryd1 <= as.Date("2022-1-6") ~ "inc",
#            dt_diaryd1 <= as.Date("2022-2-6") ~ "dec",
#            dt_diaryd1 <= as.Date("2022-6-1") ~ "lull",
#            TRUE ~ NA_character_ ))

# total number of participants per site
N <- nrow(participants)
N_site <- participants %>%
  group_by(study_site, participant_sex) %>%
  summarize(N = n())

```

## Baseline characteristics

A total of `r N` individuals participated in the study, with `r N_site$N[1]+N_site$N[2]` (`r 100*round(N_site$N[1]/(N_site$N[1]+N_site$N[2]), 2)`% female) and `r N_site$N[3]+N_site$N[4]` (`r 100*round(N_site$N[3]/(N_site$N[3]+N_site$N[4]), 2)`% female) participants recruited from the rural and urban sites, respectively. The figures below presents a summary the characteristics of the participants in the rural and urban site. In some age groups (\<5 yrs and 40-59 yrs) we recruited more than the target. By site, there was no major difference in number of participants recruited by age, sex, and school enrollment status.

<!-- ::: callout-note -->

<!-- Convert table to figures -->

<!-- ::: -->

```{r}
#| label: tbl-participant-summary
#| tbl-cap: "Participant summary"
#| include: false
#| warning: false

label(participants$study_site) <- "Site"
label(participants$aim) <- "Aim"
label(participants$participant_sex) <- "Sex"
# label(participants$age) <- "Exact age"
label(participants$participant_age) <- "Participant age"
label(participants$read_write) <- "Able to read and write"
label(participants$enrolled_school) <- "Currently enrolled in school"
label(participants$highest_educ) <- "Highest education level attained"
label(participants$school_level) <- "Current school level"
# label(participants$transport_use) <- "Transport use last 3 months"
label(participants$occupation) <- "Occupation"
label(participants$age_symptom) <- "Acute gastroenteritis (diarrhea)"
label(participants$ari_symptom) <- "Acute respiratory infection"

table1 <- participants %>%
  # dplyr::filter(aim==1) %>%
  dplyr::select(study_site, participant_sex, participant_age,  read_write, 
                enrolled_school, occupation, age_symptom, ari_symptom) %>% # day_of_week, year, study_site
  tbl_summary(by=study_site, 
              percent="column",
              digits = all_categorical() ~ 0,
              missing="ifany") %>%
  add_overall() %>%
  bold_labels() %>%
  modify_header(label = "") %>%
  modify_spanning_header(c("stat_1", "stat_2") ~ "**Site**") 
# %>% modify_caption("**Table 1: Baseline characteristics of participants in Mozambique**")

# check homemaker, college

# ## save table as text
# table1
```

## Participation summary by site

```{r}
#| label: fig-participant-summary-agesex
#| fig-cap: "Participant age and sex distribution"
#| include: true
#| warning: false

source("../scripts/00_baseline_plot_functions.R")

# Sex by participant_age
sex_page <- participants %>% 
  group_by(participant_sex, participant_age, study_site) %>% 
  dplyr::summarise(total = n(), .groups = "drop") %>%
  na.omit()

# sex_page_plt <- fun_sex_plot(sex_page) +
#       scale_color_manual(values = c("#E7B800", "#2E9FDF")) +
#       geom_vline(xintercept=0.5, linetype="dashed")
library(grid)

sex_page_plt2 <- sex_page %>%
  ggplot(., aes(x=participant_age, y=total, fill=participant_sex)) +
  geom_bar(aes(x = participant_age, y = total, fill = participant_sex), 
           position = "stack", col="white", stat="identity") +
  geom_hline(yintercept=63, linetype="dashed") +
  annotation_custom(grobTree(textGrob("Target: 63", x=0.5, y=0.5, hjust=-0.2,
                                      gp=gpar(fontsize=8)))) +
  theme_classic() +
  facet_wrap(~study_site) +
  coord_flip() +
  
  theme(strip.background = element_blank(),
        # strip.text.x = element_blank(), # remove facet titles
        panel.spacing = unit(2, "lines")) +  # increase space between facets
  labs(title = "",
       x = "Participant age", 
       y = "N",
       fill = element_blank()) +
  
  theme(legend.position = "bottom",
        # legend.title = element_text(size = 8),
        legend.text = element_text(size = 10),
        legend.justification = "center") +
  axis_text_theme
  # change legend order
  
  

ggsave(sex_page_plt2, filename = "../output/figs/1a_participant_age.pdf",
       height=6, width=8, dpi=300,
       bg="#FFFFFF")

sex_page_plt2

```

```{r}
#| label: fig-participant-summary-literacy
#| fig-cap: "Literacy level"
#| include: true
#| warning: false

# read_write by age
literacy_page <- participants %>%
  group_by(read_write, participant_age, study_site) %>% 
  dplyr::summarise(total = n(), .groups = "drop") %>%
  na.omit()

literacy_page_plt <- fun_literacy_plot(literacy_page) +
  axis_text_theme

ggsave(literacy_page_plt, filename = "../output/figs/1a_participant_literate.pdf",
       height=6, width=8, dpi=300,
       bg="#FFFFFF")

literacy_page_plt
```

```{r}
#| label: fig-participant-summary-enrolledsch
#| fig-cap: "Participant currently enrolled in school"
#| include: true
#| warning: false

# enrolled_school by age, "Currently enrolled in school"
enrolledsch_page <- participants %>%
  group_by(enrolled_school, participant_age, study_site) %>% 
  dplyr::summarise(total = n(), .groups = "drop") %>%
  na.omit()

enrolledsch_page_plt <- fun_schenrolled_plot(enrolledsch_page)

ggsave(enrolledsch_page_plt, filename = "../output/figs/1a_participant_enrolledschool.pdf",
       height=6, width=8, dpi=300,
       bg="#FFFFFF")

enrolledsch_page_plt
```

```{r}
#| label: fig-participant-summary-educationlevel
#| fig-cap: "Participant education level"
#| include: false
#| warning: false

# highest_educ by age <- "Highest education level attained"
highesteduc_page <- participants %>%
  group_by(highest_educ, participant_age, study_site) %>% 
  dplyr::summarise(total = n(), .groups = "drop") %>%
  na.omit()

highesteduc_page_plt <- fun_highesteduc_plot(highesteduc_page)

ggsave(highesteduc_page_plt, filename = "../output/figs/1a_participant_educlevel.pdf",
       height=6, width=8, dpi=300,
       bg="#FFFFFF")

highesteduc_page_plt
```

```{r}
#| label: fig-participant-summary-occupation
#| fig-cap: "Participant ccupation"
#| include: true
#| warning: false

# occupation by age <- "Occupation"
occupation_page <- participants %>%
  group_by(occupation, participant_age, study_site) %>%
  dplyr::summarise(total = n(), .groups = "drop") %>%
  na.omit()

occupation_page_plt <- fun_occupation_plot(occupation_page)

ggsave(occupation_page_plt, filename = "../output/figs/1a_participant_occupation.pdf",
       height=6, width=8, dpi=300,
       bg="#FFFFFF")

occupation_page_plt
```

```{r}
#| eval: false

# school_level by age <- "Current school level"
# schoollevel_page <- participants %>%
#   group_by(school_level, participant_age, study_site) %>% 
#   dplyr::summarise(total = n(), .groups = "drop") %>%
#   na.omit()
# 
# schoollevel_page_plt <- fun_schoollevel_plot(schoollevel_page)
# schoollevel_page_plt

# transport_use by age <- "Transport use last 3 months"

# library("ggpubr")
# baseline <- ggarrange(sex_page_plt, literacy_page_plt,enrolledsch_page_plt,
#                       highesteduc_page_plt, occupation_page_plt,
#                       ncol=1)
# baseline
```

## Summary of number of contacts reported

```{r}
#| label: tbl-contact-characteristics
#| tbl-cap: "Characteristics of contacts"
#| warning:  false
#| include: false

tot_contacts <- nrow(contacts)
tot_rural_contacts <- nrow(contacts %>% filter(study_site == "Rural"))
tot_urban_contacts <- nrow(contacts %>% filter(study_site == "Urban"))

label(contacts$contact_sex) <- "Contact sex"
label(contacts$contact_age) <- "Contact age"
label(contacts$contact_mask) <- "Was the mask wearing a contact?"
label(contacts$known_contact) <- "How long have you known this contact?"
label(contacts$duration_contact) <- "How long did the contact last?"
label(contacts$frequency_contact) <- "How many times do you have a contact with this person?"
label(contacts$where_contact) <- "Where did the contact occur?"
label(contacts$hh_membership) <- "Is this a member of your household?"
label(contacts$hh_member_relationship) <- "Relationship to household member"

# summary table for rural contacts
table2 <- contacts %>%
  dplyr::select(study_site, contact_age, contact_sex,contact_mask, known_contact, 
                hh_membership, duration_contact, frequency_contact, where_contact) %>%
  #  hh_member_relationship, 
  tbl_summary(by = study_site,
              percent = "col",
              digits = all_categorical() ~ 0,
              missing = "ifany") %>%
  add_overall() %>%
  bold_labels() %>%
  modify_header(label = "")
  # modify_spanning_header(c("stat_1", "stat_2", "stat_3") ~ "**Survey round**") 
  # %>% modify_caption("**Table 2: Contact distribution by covariates in Mozambique**")

table2
```

Overall, `r tot_contacts` contacts were reported with slightly above half (`r tot_rural_contacts`, `r round(100*(tot_rural_contacts/tot_contacts), 0)`%) from the rural site. In each site, 6% of the total contacts were reported with children aged \<5 years (7% rural, 6% urban), with 1% of the contacts in each site happening with infants aged \<6 months (148 rural, 82 urban).

The highest number of contacts were reported with children aged 10-14 yrs (26% rural, 21% urban). Overall, more contacts were reported with women (54%) with no difference between sites.

::: callout-note
Table available separately
:::

## Distribution of number of contacts on both days

Data were collected over two consecutive study days. We present a summary of total number of contacts (including repeat contacts) over both study days.

```{r}
#|  label: overall-contacts-code
#|  echo: false
#|  warning: false

# merge participant and contact data
df_contact <- contacts %>%
  dplyr::select(-study_site) %>%
  left_join(participants, by=("rec_id"))

# rural contacts
df_contact_rural <- df_contact %>%
  dplyr::filter(study_site == "Rural")

# urban contacts
df_contact_urban <- df_contact %>%
  dplyr::filter(study_site == "Urban")


# contacts by site
contacts_site <- df_contact %>%
  dplyr::group_by(rec_id, study_site) %>%
  dplyr::summarize(num_contacts = n(), .groups = "drop")

# median (IQR) limits
q <- c(.25, .5, .75)

median_contacts_site <- contacts_site %>%
  dplyr::group_by(study_site) %>%
  dplyr::summarize(q25 = quantile(num_contacts, probs = q[1]),
                   q50 = quantile(num_contacts, probs = q[2]),
                   q75 = quantile(num_contacts, probs = q[3]),
                   .groups = "drop")

mean_contacts_site <- contacts_site %>%
  dplyr::group_by(study_site) %>%
  dplyr::summarize(mean = round(mean(num_contacts),1), 
                   .groups = "drop")


ci_contacts_rural <- contacts_site %>%
  dplyr::filter(study_site == "Rural")
ci_contacts_rural <- lm(num_contacts ~ 1, ci_contacts_rural)
ci_contacts_rural <- as.data.frame(round(confint(ci_contacts_rural), 1))
names(ci_contacts_rural)[1] <- "ll"
names(ci_contacts_rural)[2] <- "ul"

ci_contacts_urban <- contacts_site %>%
  dplyr::filter(study_site == "Urban")
ci_contacts_urban <- lm(num_contacts ~ 1, ci_contacts_urban)
ci_contacts_urban <- as.data.frame(round(confint(ci_contacts_urban), 1))
names(ci_contacts_urban)[1] <- "ll"
names(ci_contacts_urban)[2] <- "ul"

```

@fig-overall-contact-distribution shows the distribution of all reported contacts over the two days.

::: callout-note
Conduct statistical tests.
:::

```{r}
#| eval: false
#| label: fig-contact-distribution-overall-plotly
#| fig-cap: "Overall distribution of contacts over two days by site."
#| warning: false
#| echo: false

# rural histograms
hist_rural <- contacts_site %>%
  dplyr::filter(study_site == "Rural") %>%
  plotly::plot_ly(x=~num_contacts, colors=cols_site[1]) %>%
  add_lines(y = range(0:100),
            x = mean_contacts_site$mean[1], #,mean(contacts_site$num_contacts),
            line = list(color = "black"),
            showlegend = FALSE) %>%
  add_annotations(x = mean_contacts_site$mean[1],
                  y = 80,
                  text = paste(mean_contacts_site$mean[1],
                               " (95% CI ", ci_contacts_rural$ll,"-",
                               ci_contacts_rural$`97.5 %`,")", sep=""),
                  showarrow = F, xanchor = "left") %>%
  layout(xaxis = list(title = "Num of contacts")) %>%
  add_histogram(name="Rural")


#
# hist_urban
hist_urban <- contacts_site %>%
  dplyr::filter(study_site == "Urban") %>%
  plotly::plot_ly(x=~num_contacts, colors=cols_site[2]) %>%
  add_lines(y = range(0:100),
            x = mean_contacts_site$mean[2], #,mean(contacts_site$num_contacts),
            line = list(color = "black"),
            showlegend = FALSE) %>%
  add_annotations(x = mean_contacts_site$mean[2],
                  y = 90,
                  text = paste(mean_contacts_site$mean[2],
                               " (95% CI ", ci_contacts_urban$ll,"-",
                               ci_contacts_urban$ul,")", sep=""),
                  showarrow = F, xanchor = "left") %>%
  layout(xaxis = list(title = "Num of contacts")) %>%
  add_histogram(name="Urban")

subplot(hist_rural, hist_urban, nrows=2, shareX = TRUE)

```

```{r}
#| eval: true
#| label: fig-overall-contact-distribution
#| warning: false

# # rural histogram
# df_hist_rural <- contacts_site %>%
#   dplyr::filter(study_site == "Rural")
hist_rural <- contacts_site %>%
  dplyr::filter(study_site == "Rural") %>%
  ggplot(., aes(x=num_contacts)) +
  geom_histogram(color = cols_site[1], fill = cols_site[1], binwidth = 1) +
  # scale_fill_manual(values = cols_site[1]) +
  scale_x_continuous(limits = c(0, 40)) +
  geom_vline(xintercept=mean_contacts_site$mean[1], color="black") +
  annotate("text", x=mean_contacts_site$mean[1]+1, y=60+1,
           label=paste0(mean_contacts_site$mean[1],
                        " (95% CI ", ci_contacts_rural$ll,"-",
                        ci_contacts_rural$`97.5 %`,")"),
           hjust=0, size=3) +
  labs(x="",
       y="Count") +
  theme(plot.title = element_text(size = 14),
        axis.title.x = element_text(size=12, face="bold"),
        axis.title.y = element_text(size=12, face="bold"),
        axis.text.x = element_text(size = 8, angle=0, hjust = 1),
        axis.text.y = element_text(size= 8),
        legend.title = element_blank()) +
  theme_classic()
# hist_rural

# # urban histogram
# df_hist_urban <- contacts_site %>%
#   dplyr::filter(study_site == "Urban")
hist_urban <- contacts_site %>%
  dplyr::filter(study_site == "Urban") %>%
  ggplot(., aes(x=num_contacts)) +
  geom_histogram(color = cols_site[2], fill = cols_site[2], binwidth = 1) +
  # scale_fill_manual(values = cols_site[2]) +
  scale_x_continuous(limits = c(0, 40)) +
  geom_vline(xintercept=mean_contacts_site$mean[2], color="black") +
  annotate("text", x=mean_contacts_site$mean[2]+1, y=60+1,
           label=paste0(mean_contacts_site$mean[2],
                        " (95% CI ", ci_contacts_urban$ll,"-",
                        ci_contacts_urban$ul,")"),
           hjust=0, size=3) +
  labs(x="",
       y="Count") +
  theme(plot.title = element_text(size = 14),
        axis.title.x = element_text(size=12, face="bold"),
        axis.title.y = element_text(size=12, face="bold"),
        axis.text.x = element_text(size = 8, angle=0, hjust = 1),
        axis.text.y = element_text(size= 8),
        legend.title = element_blank()) +
  theme_classic()
# hist_urban

overall_contacts_hist <- cowplot::plot_grid(hist_rural, hist_urban,
                                           labels = c("A", "B"),
                                           label_size = 12,
                                           label_fontfamily = "sans",
                                           ncol = 1, align = "hv", axis="tb",
                                           common.legend = TRUE, legend = "bottom") 
  # theme(legend.title = element_blank())

# save
cowplot::save_plot("../output/figs/moz_overall_contact_histogram.pdf", 
                   overall_contacts_hist, 
                   base_height = 11, base_width = 7)

# display
overall_contacts_hist
```

```{r}
#| echo: false
#| warning: false
#| include: false

# number of contacts per participant by study day

# dplyr::filter by contact day
df_contact_d1 <- df_contact %>%
  dplyr::filter(study_day==1)

df_contact_d2 <- df_contact %>%
  dplyr::filter(study_day==2)

# day 1 overall contacts per person
day1_num_contacts <- df_contact_d1 %>%
  dplyr::group_by(rec_id, study_site) %>%
  dplyr::summarize(num_contacts = n()) %>%
  dplyr::select(rec_id, num_contacts)
df_contact_d1 <- left_join(df_contact_d1, day1_num_contacts, by="rec_id" )

# day 2 overall contacts per person
day2_num_contacts <- df_contact_d2 %>%
  dplyr::group_by(rec_id, study_site) %>%
  dplyr::summarize(num_contacts = n()) %>%
  dplyr::select(rec_id, num_contacts)
df_contact_d2 <- left_join(df_contact_d2, day2_num_contacts, by="rec_id" )

```

```{r}
#| label: tbl-rural-contact-table
#| tbl-cap: "Rural contacts"
#| warning: false
#| include: false

### Rural contacts

# @tbl-rural-contact-table shows a the median (IQR) contacts in the rural area on day 1 and day 2 separately.


# table of contacts by day of study: both days, day 1 and day 2
list <- list(0)  ## empty list

## specify participant characteristic stratification for cross tabs/analysis
variables <- data.frame(var=c("participant_sex","participant_age",  
                              "hh_membership","occupation", "weekday", "enrolled_school",
                              "touch_contact", "where_contact", "cnt_home", "cnt_school",
                              "cnt_work", "cnt_otherplace", "frequency_contact",
                              "known_contact", "contact_mask2", "ari_symptom", "age_symptom"),
                        # "hh_member_relationship",
                        name=c("Sex", "Age", "Household membership", "Occupation", "Weekday/Weekend",
                               "Enrolled in school", "Did you touch?", "Contact location",
                               "Contact at home", "Contact at work", 
                               "Contact at school", "Contact in other locations",
                               "Frequency of contact", "Do you know the contact?", 
                               "Contact wearing mask", "ARI symptoms", "AGE symptoms")) %>%
                        #  "Relationship to household member",
  
  mutate(var = as.character(var),
         name = as.character(name))


for (i in 1:nrow(variables)){
  x <- df_contact_rural[,variables$var[[i]]] 
  # include another variable n as the number of participants per strata
  variables$var[[i]]
  
# Number and proportion of contacts in each strata
  
  t0 <- as.data.frame(cbind(table(x), # Total 
                            round(prop.table(table(x))*100, digits=0) # Proportion
                            )) # number of participants
 
  colnames(t0)[1:2] <- c("Total","Col") 
  Tot <- rep("",5)
  
  # Median contacts for day 1
  t1 <- df_contact_d1 %>%
    dplyr::filter(study_site == "Rural") %>%
    # since this is total contacts per person, keep only 1 distinct record
    distinct(rec_id, .keep_all = TRUE) %>% 
    dplyr::group_by(.dots = variables$var[[i]]) %>% 
    # na.omit() %>%
    do(data.frame(t(quantile(.$num_contacts, na.rm=TRUE, probs=c(0.25,0.5,0.75))))) # Median and IQR      
  t1$med_contact <- as.character(paste(t1$X50.," (",t1$X25.,"-",t1$X75.,")",sep="")) # Formatting for export
  
  # Median contacts for day 2
  t2 <- df_contact_d2 %>%
    dplyr::filter(study_site == "Rural") %>%
    # since this is total contacts per person, keep only 1 distinct record
    distinct(rec_id, .keep_all = TRUE) %>% 
    dplyr::group_by(.dots = variables$var[[i]]) %>%
    # na.omit() %>%
    do(data.frame(t(quantile(.$num_contacts, na.rm=TRUE, probs=c(0.25,0.5,0.75))))) # Median and IQR      
  t2$med_contact <- as.character(paste(t2$X50.," (",t2$X25.,"-",t2$X75.,")",sep="")) # Formatting for export
  
  # Bind columns together and select relevant columns
  t0<-qpcR:::cbind.na(t0, t1$med_contact, t2$med_contact) 
  
  # convert to numerical and round off?
  
  t0<- t0[,c(1,2,3,4)]
  
  # rename total column
  t0$Total <- paste(t0$Total," (","", t0$Col,")",sep="")
  t0 <- t0[,c(1,3,4)]
  t0[,1]<-as.character(t0[,1])
  t0[,2]<-as.character(t0[,2])

  t0<-rbind(Tot, t0)
  
  rownames(t0)[1]<-variables$name[[i]]
  list[[i]] <- t0
}

# format table
res_restruct<- function(res){
  res1 <- lapply(res, as.data.frame)
  res1 <- do.call(rbind, res1)
  return(res1)
}

table3 <- res_restruct(list)
colnames(table3) <- c("Total (%)", "Day 1", "Day 2")

table3 <- kable(table3, digits = 0, align = "r") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))

table3
```

```{r}
#| label: tbl-urban-contact-table
#| tbl-cap: "Urban contacts"
#| warning: false
#| include: true

### Urban contacts


# table of contacts by day of study: both days, day 1 and day 2
list <- list(0)  ## empty list

for (i in 1:nrow(variables)){
  x <- df_contact_urban[,variables$var[[i]]] # this should be for urban contacts only
  variables$var[[i]]

# Number and proportion of participants in each strata
  
  t0 <- as.data.frame(cbind(table(x), # Total 
                            round(prop.table(table(x))*100, digits=0))) # Proportion
  
  colnames(t0)[1:2] <- c("Total","Col") 
  Tot <- rep("",5)
  
  # Median contacts for day 1
  t1 <- df_contact_d1 %>%
    dplyr::filter(study_site == "Urban") %>%
    # since this is total contacts per person, keep only 1 distinct record
    distinct(rec_id, .keep_all = TRUE) %>% 
    dplyr::group_by(.dots = variables$var[[i]]) %>% 
    do(data.frame(t(quantile(.$num_contacts, na.rm=TRUE, probs=c(0.25,0.5,0.75))))) # Median and IQR      
  t1$med_contact <- as.character(paste(t1$X50.," (",t1$X25.,"-",t1$X75.,")",sep="")) # Formatting for export
  
  # Median contacts for day 2
  t2 <- df_contact_d2 %>%
    dplyr::filter(study_site == "Urban") %>%
    # since this is total contacts per person, keep only 1 distinct record
    distinct(rec_id, .keep_all = TRUE) %>% 
    dplyr::group_by(.dots = variables$var[[i]]) %>% 
    do(data.frame(t(quantile(.$num_contacts, na.rm=TRUE, probs=c(0.25,0.5,0.75))))) # Median and IQR      
  t2$med_contact <- as.character(paste(t2$X50.," (",t2$X25.,"-",t2$X75.,")",sep="")) # Formatting for export
  
  # Bind columns together and select relevant columns
  t0<-qpcR:::cbind.na(t0, t1$med_contact, t2$med_contact) 
  t0<- t0[,c(1,2,3,4)]
  
  # rename total column
  t0$Total <- paste(t0$Total," (","", t0$Col,")",sep="")
  t0 <- t0[,c(1,3,4)]
  t0[,1]<-as.character(t0[,1])
  t0[,2]<-as.character(t0[,2])

  t0<-rbind(Tot, t0)
  
  rownames(t0)[1]<-variables$name[[i]]
  list[[i]] <- t0
}

# format table
res_restruct<- function(res){
  res1 <- lapply(res, as.data.frame)
  res1 <- do.call(rbind, res1)
  return(res1)
}

table4 <- res_restruct(list)
colnames(table4) <- c("Total (%)", "Day 1", "Day 2")

table4 <- kable(table4, digits = 0, align = "r") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
table4

rm(t0, t1, t2)


# @tbl-urban-contact-table shows a summary of the median (IQR) contacts in the urban area on day 1 and day 2 separately.
# We observe no difference in the median (IQR) number of contacts reported on day 1 compared to day 2.
```

The mean (95% CI) contacts for the rural and urban sites was `r mean_contacts_site$mean[1]` (95% CI `r ci_contacts_rural$ll` - `r ci_contacts_rural$ul`) and `r mean_contacts_site$mean[2]` (95% CI `r ci_contacts_urban$ll`-`r ci_contacts_urban$ul`), respectively. The rural area reported higher number of mean contacts compared to the urban area. Additionally, we observe no difference in the median (IQR) number of contacts reported on day 1 compared to day 2 for both rural and urban sites.

::: callout-note
Additional analysis can include: 1. mean number of contacts over both days 2. mean number of contacts of unique contacts only over both days 3. mean number of unique contacts reported on both day 1 and 2
:::

::: callout-important
So from here below, I only present summaries of contacts for day 1 only.
:::

## Distrubution of number of contacts on day 1 only

@fig-contact-distribution-d1 shows the distribution of the contacts by rural and urban site and the corresponding mean contact rates on day 1 only. The rural mean contact rate was higher than the urban rate ()

```{r}
#| label: overall-mean-contacts
#| warning: false

# contacts by site
contacts_site_d1 <- df_contact_d1 %>%
  dplyr::group_by(rec_id, study_site) %>%
  dplyr::summarize(num_contacts = n())

median_contacts_site_d1 <- contacts_site_d1 %>%
  dplyr::group_by(study_site) %>%
  dplyr::summarize(q25 = quantile(num_contacts, probs = q[1]),
                   q50 = quantile(num_contacts, probs = q[2]),
                   q75 = quantile(num_contacts, probs = q[3]))

mean_contacts_site_d1 <- contacts_site_d1 %>%
  dplyr::group_by(study_site) %>%
  dplyr::summarize(mean = round(mean(num_contacts),1))

ci_contacts_rural_d1 <- contacts_site_d1 %>%
  dplyr::filter(study_site == "Rural")
ci_contacts_rural_d1 <- lm(num_contacts ~ 1, ci_contacts_rural_d1)
ci_contacts_rural_d1 <- as.data.frame(round(confint(ci_contacts_rural_d1),1))

ci_contacts_urban_d1 <- contacts_site_d1 %>%
  dplyr::filter(study_site == "Urban")
ci_contacts_urban_d1 <- lm(num_contacts ~ 1, ci_contacts_urban_d1)
ci_contacts_urban_d1 <- as.data.frame(round(confint(ci_contacts_urban_d1),1))


# plot
# overall_contacts_summary <- contacts_site_d1 %>%
#   group_by(study_site) %>%
#   summarize(mean_num_contacts = round(mean(num_contacts), 1), 
#             ci_low = round(mean_num_contacts - 1.96 * sd(num_contacts) / sqrt(n()), 1), 
#             ci_high = round(mean_num_contacts + 1.96 * sd(num_contacts) / sqrt(n()),1))
# 
# ggplot(contacts_site_d1, aes(x=num_contacts)) +
#   geom_histogram(binwidth=1, alpha=0.7) +
#   facet_wrap(~study_site, ncol=1) +
#   geom_vline(data = overall_contacts_summary, aes(xintercept = mean_num_contacts), 
#              linetype="dashed", color="black", size=0.5) +
#   labs(x = "Num of contacts", y = "Count", title = "Number of contacts by study site") +
#   theme_classic() 

```

```{r}
#| eval: true
#| label: fig-contact-distribution-d1
#| warning: false

# # rural histogram
# df_hist_rural_d1 <- contacts_site_d1 %>%
#   dplyr::filter(study_site == "Rural")
hist_rural_d1 <- contacts_site_d1 %>%
  dplyr::filter(study_site == "Rural") %>%
  ggplot(., aes(x=num_contacts)) +
  geom_histogram(color = cols_site[1], fill = cols_site[1], binwidth = 1) +
  # scale_fill_manual(values = cols_site[1]) +
  scale_x_continuous(limits = c(0, 40)) +
  geom_vline(xintercept=mean_contacts_site_d1$mean[1], color="black") +
  annotate("text", x=mean_contacts_site_d1$mean[1]+1, y=60+1,
           label=paste0(mean_contacts_site_d1$mean[1],
                        " (95% CI ", ci_contacts_rural_d1$`2.5 %`,"-",
                        ci_contacts_rural_d1$`97.5 %`,")"),
           hjust=0, size=3) +
  labs(x="",
       y="Count") +
  theme(plot.title = element_text(size = 14),
        axis.title.x = element_text(size=12, face="bold"),
        axis.title.y = element_text(size=12, face="bold"),
        axis.text.x = element_text(size = 8, angle=0, hjust = 1),
        axis.text.y = element_text(size= 8),
        legend.title = element_blank()) +
  theme_classic()
# hist_rural_d1

# # urban histogram
# df_hist_urban_d1 <- contacts_site_d1 %>%
#   dplyr::filter(study_site == "Urban")
hist_urban_d1 <- contacts_site_d1 %>%
  dplyr::filter(study_site == "Urban") %>%
  ggplot(., aes(x=num_contacts)) +
  geom_histogram(color = cols_site[2], fill = cols_site[2], binwidth = 1) +
  # scale_fill_manual(values = cols_site[2]) +
  scale_x_continuous(limits = c(0, 40)) +
  geom_vline(xintercept=mean_contacts_site_d1$mean[2], color="black") +
  annotate("text", x=mean_contacts_site_d1$mean[2]+1, y=60+1,
           label=paste0(mean_contacts_site_d1$mean[2],
                        " (95% CI ", ci_contacts_urban_d1$`2.5 %`,"-",
                        ci_contacts_urban_d1$`97.5 %`,")"),
           hjust=0, size=3) +
  labs(x="",
       y="Count") +
  theme(plot.title = element_text(size = 14),
        axis.title.x = element_text(size=12, face="bold"),
        axis.title.y = element_text(size=12, face="bold"),
        axis.text.x = element_text(size = 8, angle=0, hjust = 1),
        axis.text.y = element_text(size= 8),
        legend.title = element_blank()) +
  theme_classic()
# hist_urban_d1

moz_day1_contacts_histogram <- cowplot::plot_grid(hist_rural_d1, hist_urban_d1,
                                           ncol = 1, align = "hv", axis="tb",
                                           common.legend = TRUE, legend = "bottom") 
  # theme(legend.title = element_blank())

cowplot::save_plot("../output/figs/moz_day1_contacts_histogram.pdf", 
                   moz_day1_contacts_histogram, 
                   base_height = 11, base_width = 7)

moz_day1_contacts_histogram

# ggpubr::ggarrange(hist_rural_d1, hist_urban_d1, 
#                   ncol = 1, nrow = 2,
#                   common.legend = FALSE, legend = "bottom",
#                   common.axis = TRUE, axis="both",
#                   align = "hv", heights = c(2, 2))


```

```{r}
#| label: figure-one 

moz_figure_1 <- cowplot::plot_grid(sex_page_plt2, occupation_page_plt, 
                                 enrolledsch_page_plt, literacy_page_plt,
                                 ncol = 2, align = "hv", axis="tb",
                                 legend = "bottom")

cowplot::save_plot("../output/figs/moz_figure_1.pdf", 
                   moz_figure_1, 
                   base_height = 20, base_width = 20)

moz_figure_1

```

### Distribution of contacts for each site site:

#### by age

```{r}
#| label: fig-contact-boxplot-age
#| fig-cap: "Overall distribution of contacts by rural and urban site"
#| warning: false

# median by attributes
# 1. age
contacts_age <- df_contact_d1 %>%
  dplyr::group_by(rec_id, study_site, participant_age) %>%   # group by id and count number of df_contact_d1
  dplyr::summarize(num_contacts = n())

fig2_age_box <- contacts_age %>%
  plotly::plot_ly(x=~participant_age,  y=~num_contacts,  color=~study_site,  
                  type = 'box',  colors = c("#a6611a", "#018571")) %>%
  plotly::layout(xaxis = list(title = "Participant age"),  
                 yaxis = list(title = "Number of contacts",
                              range=list(0,40))) %>%
  plotly::layout(boxmode = "group")

# ggsave(fig2_age_box, filename = "../output/figs/age_site_boxplot.pdf",
#        height=6, width=8, dpi=300,
#        bg="#FFFFFF")

fig2_age_box
```

#### by sex

```{r}
#| label: fig-contact-boxplot-sex
#| fig-cap: "Distribution of contacts by sex"
#| warning: false

# overall
contacts_sex <- df_contact_d1 %>%
  dplyr::group_by(rec_id, study_site, participant_age, participant_sex) %>%   # group by id and count number of contacts
  dplyr::summarize(num_contacts = n())
# mean_contacts_sex <- 

# by age
fig3_sex_rural_box <- contacts_sex %>%
  dplyr::filter(study_site == "Rural") %>%
  plotly::plot_ly(x=~participant_age,  y=~num_contacts,  color=~participant_sex,  
                      type = 'box',  colors = c("#ef8a62", "#67a9cf")) %>%
  plotly::layout(#annotations = title_rural_d1,
                 xaxis = list(title= 'Participant age'),  
                 yaxis = list(title='Number of contacts',
                              range=list(0,40))) %>%
  plotly::layout(boxmode = "group")

fig3_sex_urban_box <- contacts_sex %>%
  dplyr::filter(study_site == "Urban") %>%
  plotly::plot_ly(x=~participant_age,  y=~num_contacts,  color=~participant_sex,  
                      type = 'box',  colors = c("#ef8a62", "#67a9cf")) %>%
  plotly::layout(#annotations = title_urban_d1,
                 xaxis = list(title= 'Participant age'),  
                 yaxis = list(title='Number of contacts',
                              range=list(0,40))) %>%
  plotly::layout(boxmode = "group")

fig3_sex_box <- subplot(style(fig3_sex_rural_box, showlegend = F), nrows=2, fig3_sex_urban_box, 
        shareX = TRUE, margin=0.05)

# ggsave(fig2_sex_box, filename = "../output/figs/moz_sex_site_boxplot.pdf",
#        height=6, width=8, dpi=300,
#        bg="#FFFFFF")
```

#### by household membership

```{r}
#| label: fig-contact-boxplot-hhmembership
#| fig-cap: "Distribution of contacts by household membership"
#| warning: false

# overall
contacts_hhmember <- df_contact_d1 %>%
  dplyr::group_by(rec_id, study_site, participant_age, hh_membership) %>%   # group by id and count number of contacts
  dplyr::summarize(num_contacts = n())
# mean_contacts_hhmember <- 

# by age
fig4_hhmember_rural_box <- contacts_hhmember %>%
  dplyr::filter(study_site == "Rural") %>%
  plotly::plot_ly(x=~participant_age,  y=~num_contacts,  color=~hh_membership,  
                      type = 'box',  colors = c("#ef8a62", "#67a9cf")) %>%
  plotly::layout(#annotations = title_rural_d1,
                 xaxis = list(title= 'Participant age'),  
                 yaxis = list(
                   title='Number of contacts',
                   range=list(0,40))) %>%
  plotly::layout(boxmode = "group")

fig4_hhmember_urban_box <- contacts_hhmember %>%
  dplyr::filter(study_site == "Urban") %>%
  plotly::plot_ly(x=~participant_age,  y=~num_contacts,  color=~hh_membership,  
                      type = 'box',  colors = c("#ef8a62", "#67a9cf")) %>%
  plotly::layout(#annotations = title_urban_d1,
                 xaxis = list(title= 'Participant age'),  
                 yaxis = list(
                   title='Number of contacts',
                   range=list(0,40))) %>%
  plotly::layout(boxmode = "group")

subplot(style(fig4_hhmember_rural_box, showlegend = F), nrows=2, fig4_hhmember_urban_box, 
        shareX = TRUE, margin=0.05)
  

```

#### by current school enrollment

```{r}
#| label: fig-contact-boxplot-education
#| fig-cap: "Distribution of contacts by school enrollment"
#| warning: false

# enrolled in school
contacts_education <- df_contact_d1 %>%
  # group by id and count number of contacts
  dplyr::group_by(rec_id, study_site, participant_age, enrolled_school) %>%   
  drop_na(enrolled_school) %>%
  dplyr::summarize(num_contacts = n())
# mean_contacts_education <- 
  
fig5_school_rural_box <- contacts_education %>%
  dplyr::filter(study_site == "Rural") %>%
  plotly::plot_ly(x=~participant_age,  y=~num_contacts,  color=~enrolled_school,  
                      type = 'box',  colors = c("#ef8a62", "#67a9cf")) %>%
  plotly::layout(#annotations = title_rural_d1,
                 xaxis = list(title= 'Participant age'),  
                 yaxis = list(title='Number of contacts',
                              range=list(0,40))) %>%
  plotly::layout(boxmode = "group")

fig5_school_urban_box <- contacts_education %>%
  dplyr::filter(study_site == "Urban") %>%
  plotly::plot_ly(x=~participant_age,  y=~num_contacts,  color=~enrolled_school,  
                      type = 'box',  colors = c("#ef8a62", "#67a9cf")) %>%
  plotly::layout(#annotations = title_urban_d1,
                 xaxis = list(title= 'Participant age'),  
                 yaxis = list(title='Number of contacts',
                              range=list(0,40))) %>%
  plotly::layout(boxmode = "group")

subplot(style(fig5_school_rural_box, showlegend = F), nrows=2, fig5_school_urban_box, 
        shareX = TRUE, margin=0.05)

```

#### by day of the week

```{r}
#| label: fig-contact-boxplot-dayweek
#| fig-cap: "Distribution of contacts by day of the week"
#| warning: false

# day of week
contacts_dayweek <- df_contact_d1 %>%
  dplyr::group_by(rec_id, study_site, participant_age, participant_sex, day_of_week) %>%
  dplyr::summarize(num_contacts = n()) %>%
  na.omit()

fig6_dayweek_rural_box <- contacts_dayweek %>%
  dplyr::filter(study_site == "Rural") %>%
  plotly::plot_ly(x=~participant_age,  y=~num_contacts,  color=~day_of_week,  
                      type = 'box',  colors = c("#a6bddb", "#67a9cf", "#3690c0", 
                                                "#02818a", "#02818a", "#fed976", "#fd8d3c")) %>%
  plotly::layout(#annotations = title_rural_d1,
                 xaxis = list(title= 'Participant age'),  
                 yaxis = list(title='Number of contacts',
                              range=list(0,40))) %>%
  plotly::layout(boxmode = "group")

fig6_dayweek_urban_box <- contacts_dayweek %>%
  dplyr::filter(study_site == "Urban") %>%
  plotly::plot_ly(x=~participant_age,  y=~num_contacts,  color=~day_of_week,  
                      type = 'box',  colors = c("#a6bddb", "#67a9cf", "#3690c0", 
                                                "#02818a", "#02818a", "#fed976", "#fd8d3c")) %>%
  plotly::layout(#annotations = title_urban_d1,
                 xaxis = list(title= 'Participant age'),  
                 yaxis = list(title='Number of contacts',
                              range=list(0,40))) %>%
  plotly::layout(boxmode = "group")

subplot(style(fig6_dayweek_rural_box, showlegend = F), nrows=2, fig6_dayweek_urban_box, 
        shareX = TRUE, margin=0.05)

```

#### by weekday/ weekend

```{r}
#| label: fig-contact-boxplot-weekday
#| fig-cap: "Distribution of contacts by weekday/weekend"
#| warning: false

# weekday/weekend
contacts_weekday <- df_contact_d1 %>%
  dplyr::group_by(rec_id, study_site, participant_age, weekday) %>%
  dplyr::summarize(num_contacts = n()) %>%
  na.omit()

fig7_weekday_rural_box <- contacts_weekday %>%
  dplyr::filter(study_site == "Rural") %>%
  plotly::plot_ly(x=~participant_age,  y=~num_contacts,  color=~weekday,  
                      type = 'box',  colors = c("#ef8a62", "#67a9cf")) %>%
  plotly::layout(#annotations = title_rural_d1,
                 xaxis = list(title= 'Participant age'),  
                 yaxis = list(title='Number of contacts',
                              range=list(0,40))) %>%
  plotly::layout(boxmode = "group")

fig7_weekday_urban_box <- contacts_weekday %>%
  dplyr::filter(study_site == "Urban") %>%
  plotly::plot_ly(x=~participant_age,  y=~num_contacts,  color=~weekday,  
                      type = 'box',  colors = c("#ef8a62", "#67a9cf")) %>%
  plotly::layout(#annotations = title_urban_d1,
                 xaxis = list(title= 'Participant age'),  
                 yaxis = list(title='Number of contacts',
                              range=list(0,40))) %>%
  plotly::layout(boxmode = "group")

subplot(style(fig7_weekday_rural_box, showlegend = F), nrows=2, fig7_weekday_urban_box, 
        shareX = TRUE, margin = 0.05)

```

#### by week of the year

```{r}
#| label: fig-contact-boxplot-weekyear
#| fig-cap: "Distribution of contacts by week of the year"
#| warning: false

# week numbers for 2021: https://www.epochconverter.com/weeks/2021

# week of the year
contacts_weekyear <- df_contact_d1 %>%
  dplyr::group_by(rec_id, study_site, participant_age, weekyear) %>%
  dplyr::summarize(num_contacts = n(),
                   n_participants = length(unique(rec_id)))

# number of unique participants per week
participants_weekyear <- df_contact_d1 %>%
  dplyr::group_by(study_site, weekyear) %>%
  dplyr::summarize(n_participants = length(unique(rec_id)))


fig8_weekyear_rural_box <- contacts_weekyear %>%
  dplyr::filter(study_site == "Rural") %>%
  plotly::plot_ly(x=~weekyear,  y=~num_contacts,  color=~study_site,  
                      type = 'box',  colors = c("#ef8a62", "#67a9cf")) %>%
  plotly::layout(#annotations = title_rural_d1,
                 xaxis = list(title= 'Week of year'),  
                 yaxis = list(title='Number of contacts',
                              range=list(0,40))) %>%
  plotly::layout(boxmode = "group") %>%
  
  # highlight COVID-19 periods: refs
  # https://allafrica.com/stories/202106281037.html
  # https://www.science.org/doi/10.1126/science.abq5358
  plotly::layout(shapes = list(
    # wave 2, Oct 2020-Feb 2021. restrictions eased in May

    # wave 3, delta, Apr 26 2021 - Aug 2 2021
    list(type = "rect",
         fillcolor = "#bdbdbd", line=list(color="#f0f0f0"), opacity=0.3,
         x0="5", x1="18", xref="x",
         y0=0, y1=40, yref="y"),
    
    # wave 4. omicron, Oct 2021-Jan 2022
    list(type = "rect",
         fillcolor = "#bdbdbd", line=list(color="#f0f0f0"), opacity=0.3,
         x0="29", x1="2022-2", xref="x",
         y0=0, y1=40, yref="y")
    )) %>%
  add_annotations(text = "Wave 3, Delta",
                  x=0.2, y=0.85,
                  size = 12,
                  xref = "paper", yref = "paper",  
                  xanchor = "center", yanchor = "bottom",  
                  showarrow = FALSE) %>%
    add_annotations(text = "Wave 4, Omicron",
                    size = 12,
                    x=0.66, y=0.85,
                    xref = "paper", yref = "paper",  
                    xanchor = "center", yanchor = "bottom",  
                    showarrow = FALSE)
# fig8_weekyear_rural_box

fig8_weekyear_urban_box <- contacts_weekyear %>%
  dplyr::filter(study_site == "Urban") %>%
  plotly::plot_ly(x=~weekyear,  y=~num_contacts,  color=~study_site,  
                      type = 'box',  colors = c("#ef8a62", "#67a9cf")) %>%
  plotly::layout(#annotations = title_urban_d1,
                 xaxis = list(title= 'Week of year'),  
                 yaxis = list(title='Number of contacts',
                              range=list(0,40))) %>%
  plotly::layout(boxmode = "group")  %>%
  
  # highlight COVID-19 periods: refs
  # https://allafrica.com/stories/202106281037.html
  # https://www.science.org/doi/10.1126/science.abq5358
  plotly::layout(shapes = list(
    # wave 2, Oct 2020-Feb 2021. restrictions eased in May

    # wave 3, delta, Apr 26 2021 - Aug 2 2021
    list(type = "rect",
         fillcolor = "#bdbdbd", line=list(color="#f0f0f0"), opacity=0.3,
         x0="5", x1="18", xref="x",
         y0=0, y1=40, yref="y"),
    
    # wave 4. omicron, Oct 2021-Jan 2022
    list(type = "rect",
         fillcolor = "#bdbdbd", line=list(color="#f0f0f0"), opacity=0.3,
         x0="29", x1="2022-2", xref="x",
         y0=0, y1=40, yref="y")
    )) %>%
  add_annotations(text = "Wave 3, Delta",
                  x=0.2, y=0.85,
                  size = 12,
                  xref = "paper", yref = "paper",  
                  xanchor = "center", yanchor = "bottom",  
                  showarrow = FALSE) %>%
    add_annotations(text = "Wave 4, Omicron",
                    size = 12,
                    x=0.66, y=0.85,
                    xref = "paper", yref = "paper",  
                    xanchor = "center", yanchor = "bottom",  
                    showarrow = FALSE) 

# participants_weekyear %>%
#   dplyr::filter(study_site == "Urban") %>%
#   plotly::plot_ly(x=~weekyear,  y=~n_participants,  
#                       type = 'scatter', mode="line") %>%
#   plotly::layout(annotations = title_urban_d1,
#                  xaxis = list(title= 'Week of year'),  
#                  yaxis = list(title='Number of participants',
#                               range=list(0,50)))

subplot(style(fig8_weekyear_rural_box, showlegend = F), nrows=2, fig8_weekyear_urban_box, 
        shareX = TRUE, margin = 0.05)

```

#### by ARI infection status

```{r}
#| label: fig-contact-boxplot-arisymptom
#| fig-cap: "Distribution of contacts by ARI status"
#| warning: false
#| 
# overall
contacts_ari <- df_contact_d1 %>%
  dplyr::group_by(rec_id, study_site, participant_age, ari_symptom) %>%   # group by id and count number of contacts
  dplyr::summarize(num_contacts = n())
# mean_contacts_sex <- 

# by age
fig8_ari_rural_box <- contacts_ari %>%
  dplyr::filter(study_site == "Rural") %>%
  plotly::plot_ly(x=~participant_age,  y=~num_contacts,  color=~ari_symptom,  
                      type = 'box',  colors = c("#ef8a62", "#67a9cf")) %>%
  plotly::layout(#annotations = title_rural_d1,
                 xaxis = list(title= 'Participant age'),  
                 yaxis = list(title='Number of contacts',
                              range=list(0,40))) %>%
  plotly::layout(boxmode = "group")

fig8_ari_urban_box <- contacts_ari %>%
  dplyr::filter(study_site == "Urban") %>%
  plotly::plot_ly(x=~participant_age,  y=~num_contacts,  color=~ari_symptom,  
                      type = 'box',  colors = c("#ef8a62", "#67a9cf")) %>%
  plotly::layout(#annotations = title_urban_d1,
                 xaxis = list(title= 'Participant age'),  
                 yaxis = list(title='Number of contacts',
                              range=list(0,40))) %>%
  plotly::layout(boxmode = "group")

subplot(style(fig8_ari_rural_box, showlegend = F), nrows=2, fig8_ari_urban_box, 
        shareX = TRUE, margin=0.05)
```

#### by AGE infection status

```{r}
#| label: fig-contact-boxplot-agesymptom
#| fig-cap: "Distribution of contacts by AGE infection status"
#| warning: false

# overall
contacts_age <- df_contact_d1 %>%
  dplyr::group_by(rec_id, study_site, participant_age, age_symptom) %>%   # group by id and count number of contacts
  dplyr::summarize(num_contacts = n())
# mean_contacts_sex <- 

# by age
fig8_age_rural_box <- contacts_age %>%
  dplyr::filter(study_site == "Rural") %>%
  plotly::plot_ly(x=~participant_age,  y=~num_contacts,  color=~age_symptom,  
                      type = 'box',  colors = c("#ef8a62", "#67a9cf")) %>%
  plotly::layout(#annotations = title_rural_d1,
                 xaxis = list(title= 'Participant age'),  
                 yaxis = list(title='Number of contacts',
                              range=list(0,40))) %>%
  plotly::layout(boxmode = "group")

fig8_age_urban_box <- contacts_age %>%
  dplyr::filter(study_site == "Urban") %>%
  plotly::plot_ly(x=~participant_age,  y=~num_contacts,  color=~age_symptom,  
                      type = 'box',  colors = c("#ef8a62", "#67a9cf")) %>%
  plotly::layout(#annotations = title_urban_d1,
                 xaxis = list(title= 'Participant age'),  
                 yaxis = list(title='Number of contacts', 
                              range=list(0,40))) %>%
  plotly::layout(boxmode = "group")

subplot(style(fig8_age_rural_box, showlegend = F), nrows=2, fig8_age_urban_box, shareX = TRUE)
```

#### by employment

### Unweighted non-symmetrical contact matrices

```{r}
#| label: martix-calculations
#| echo: false
#| include: false
#| warning: false

# this only assumes contacts occur within the same age groups, hence the paired ages
standard_str <- data.frame(participant_age = rep(unique(df_contact$participant_age), each=10),
                            contact_age = rep(unique(df_contact$participant_age),each = 10))
                          
n_participants_rural <- participants %>%
  dplyr::filter(study_site == "Rural") %>%
  dplyr::group_by(participant_age) %>%
  summarize(n_participants = n())
  
m1_rural <- df_contact_d1 %>%
  dplyr::filter(study_site == "Rural") %>%
  dplyr::group_by(participant_age, contact_age) %>%
  summarize(total_contacts = n()) %>%
  full_join(standard_str, by = c("participant_age", "contact_age"), keep = F) %>%
  dplyr::mutate(total_contacts = replace_na(total_contacts, 0)) %>% # if total_contacts==NA, replace with 0
  drop_na() %>%
  distinct(participant_age, contact_age, .keep_all = T) %>%
  left_join(n_participants_rural, by="participant_age")  %>%
  dplyr::mutate(average_contact = round(total_contacts / n_participants_rural$n_participants, digits = 1))


n_participants_urban <- participants %>%
  dplyr::filter(study_site == "Urban") %>%
  dplyr::group_by(participant_age) %>%
  summarize(n_participants = n())
missing_data <- data.frame(participant_age="15-19y", contact_age="<6mo", 
                           total_contacts=0, n_participants=60)


m1_urban <- df_contact_d1 %>%
  dplyr::filter(study_site == "Urban") %>%
  mutate(participant_age = as.character(participant_age),
         contact_age = as.character(contact_age)) %>%
  dplyr::group_by(participant_age, contact_age) %>%
  dplyr::summarize(total_contacts = n()) %>%
  drop_na(contact_age) %>%
  left_join(n_participants_urban, by="participant_age") %>%
  rbind(missing_data) %>%
  mutate(average_contact = (round(total_contacts/n_participants_urban$n_participants, 1))) %>%
  # rename(average_contact = "average_contact$n") %>%
  dplyr::select(participant_age, contact_age, average_contact) %>%
  dplyr::mutate(participant_age = factor(participant_age,
                                  levels = c("<6mo", "6-11mo", "1-4y","5-9y", 
                                             "10-14y", "15-19y", "20-29y", 
                                             "30-39y", "40-59y", "60+y")),
         contact_age = factor(contact_age,
                              levels = c("<6mo", "6-11mo", "1-4y","5-9y", 
                                         "10-14y", "15-19y", "20-29y", 
                                         "30-39y", "40-59y", "60+y")))
         
```

```{r}
#| label: matrix-functions
#| echo: false
#| warning: false
#| include: false

# function to generate overall matrices
fun_matrix1_plot <- function(m1data, title){
  m1data %>%
    ggplot(aes(x = participant_age, y = contact_age, fill=average_contact)) +
    geom_raster() +
    geom_text(aes(participant_age, contact_age, label = average_contact), 
              color = "black", size = 3) +
    theme_classic() +
    scale_fill_gradient2(low="#0571b0", mid="#92c5de", high="#ca0020", 
                         limits=c(0,8), breaks=(c(0,2,4,6,8))) +
    labs(x ="Participant age", 
         y = "Contact age",
         title = title,
         fill = "Average\ncontacts") +
    theme(legend.title = element_text(size = 10),
          legend.text = element_text(size = 8),
          legend.justification = "right") +
    theme(plot.title = element_text(size = 20), 
          axis.title.x = element_text(size=16, face="bold"),
          axis.title.y = element_text(size=16, face="bold"),
          axis.text.x = element_text(size = 10, angle=60),
          axis.text.y = element_text(size= 10))
}
```

```{r}
#| label: fig-contact-matrix
#| fig-cap: "Crude contact matrices in rural and urban Mozambique"

rural_matrix <- fun_matrix1_plot(m1_rural, "Rural site")
# ggplotly(rural_matrix, tooltip = "text")
 
urban_matrix <- fun_matrix1_plot(m1_urban, "Urban site")
# ggplotly(urban_matrix, tooltip = "text")

crude_matrix <- subplot(style(rural_matrix, showlegend = F), urban_matrix, shareY = TRUE) %>%
  layout(title = 'Contact matrices by site',
         annotations = list(
           list(x=0.2, y=1.0, 
                text = "Rural",
                xref = "paper",  
                yref = "paper",  
                xanchor = "center",  
                yanchor = "bottom",  
                showarrow = FALSE),
           list(x=0.8, y=1.0, 
                text = "Urban",
                xref = "paper",  
                yref = "paper",  
                xanchor = "center",  
                yanchor = "bottom",  
                showarrow = FALSE)))


orca(crude_matrix, "../output/figs/day1_crude_matrix.pdf")


```

```{r}

### Weighted contact matrix


# col_names <- c("60+y","40-59y","30-39y","20-29y","15-19y","10-14y","5-9y","1-4y","6-11mo","<6mo") 
# row_names <- c("60+y","40-59y","30-39y","20-29y","15-19y","10-14y","5-9y","1-4y","6-11mo","<6mo")
# 
# 
# mozambique_pop_dist_2021 <- rio::import("../data/pop_dist_ines_2021.csv") 
# 
# # need to get population of children aged 6-11 months to compute this.
# # assume <6mo are 50% of 6-11 mo
# rural_population <- mozambique_pop_dist_2021 %>%
#   select(age_cat, rural) 
# missing_age <- c("<6mo", 0.5*rural_population[1,2]) %>%
#   rename(age_cat = "X..6mo.")
# rural_population <- rural_population %>%
#   rbind(missing_age)
# rural_population$rural[rural_population$age_cat == "0"] <- 0.5*rural_population[1,2]
# rural_population$age_cat[rural_population$age_cat == "0"] <- "6-11mo"
# 
# rural_population <- rural_population %>%
#   mutate(age_cat = factor(age_cat, levels = c("<6mo", "6-11mo", "1-4y","5-9y", 
#                                              "10-14y", "15-19y", "20-29y", 
#                                              "30-39y", "40-59y", "60+y"))) %>%
#   mutate(rural = as.numeric(rural),
#            weight = 1/rural) %>%
#   select(weight)
# # unweighted matrix
# m1_rural_matrix <- matrix(m1_rural$average_contact$n_participants,10,10, byrow=F)
# # m1_rural_weighted[is.na(m1_rural_weighted)] = 0
# 
# # this generates a square weighted reciprocal matrix for ages >20 years.
# k <- 10
# m1_rural_w <- matrix(0,k,k) 
# 
# for(i in 1:k){
#   for(j in 1:k){
#     m1_rural_w[i,j] <- (m1_rural_matrix[i,j]*rural_population[i] + m1_rural_matrix[j,i]*rural_population[j]) / 
#       2*(pop_dist_ines_2021[i] + pop_dist_ines_2021[j])
#     if(is.na(m1_rural_w[i,j]) | is.infinite(m1_rural_w[i,j])) 
#       m1_rural_w[i,j] <- 0
#   }
# }
# 
# m_rural_w <- as.data.frame(m_rural_w)
# rownames(m_rural_w) <- row_names
# colnames(m_rural_w) <- col_names
```

### Contact behavior

```{r}
#| label: contact-behavior
#| include: false

theme_set(theme_minimal())

contact_behav <- df_contact_d1 %>% 
  dplyr::select(study_site, participant_age, touch_contact, where_contact, contact_mask, duration_contact) %>%
  mutate(where_contact = as.character(where_contact),
         touch_contact = as.character(touch_contact),
         contact_mask = as.character(contact_mask),
         duration_contact = as.character(duration_contact)) %>%
  pivot_longer(cols = touch_contact:duration_contact, names_to="var", values_to="value") %>%
  dplyr::group_by(study_site, participant_age, var, value) %>%
  dplyr::filter(value != "I don't remember") %>%
  dplyr::summarize(n=n()) %>%
  na.omit() %>%
  left_join(df_contact_d1 %>% 
              dplyr::group_by(participant_age, study_site) %>%
              dplyr::summarize(tot_contacts=n()), by = c("participant_age"="participant_age", 
                                                  "study_site" = "study_site")) %>%
  mutate(prop = round(n/tot_contacts, digits=1)) %>%
  mutate(value = factor(value, 
                        levels = c("Yes, for the entire encounter", "Yes, during parts of encounter",
                                   "No mask was worn during the encounter", 
                                   
                                   "Yes", "No", 
                                   # " Never met before", "<1 yr", "1-2 yrs", "3-5 yrs", 
                                   # " 6-10 yrs", ">10 yrs",
                                   
                                   "Indoors", "Outdoors", "Both",
                                   
                                   "<5 mins", "5-15 mins", "16-30 mins",
                                   "31 mins-1 hr", "1-4 hrs", ">4 hrs"),
                        
                        labels = c("Yes, fully", "Yes, partly", "No mask",    
                                   
                                   "Yes", "No", 
                                   
                                   # " Never met", "<1yr", "1-2yrs ", "3-5yrs ", 
                                   # " 6-10yrs", ">10yrs",
                                   
                                   "Indoors", "Outdoors", "Both",
                                   
                                   "<5 mins", "5-15mins", "16-30mins", 
                                   "31 mins-1hr ", "1-4hrs", ">4hrs")))
                                         
# function to plot behavior of contacts by age

unhighlighed_col_darker <- 'grey60'

contact_behav_fun <- function(df, action){
  df %>% 
    dplyr::filter(var == action) %>% 
    ggplot(x = prop, y = participant_age, fill = value) +
    geom_col(aes(x = prop, y = participant_age, fill = value), 
             position = "fill", col="white") +

    # plot by site and delete site title slab
    facet_wrap(~study_site) +
    theme(strip.background = element_blank(),
          strip.text.x = element_blank(), # remove facet titles
          panel.spacing = unit(2, "lines")) + # increase space between facets
    
    theme(axis.text.x = element_text(angle = 45, hjust=1)) +
    labs(title = "",
         x = "", 
         y = "Participant age",
         fill = element_blank()) +
    
    coord_cartesian(xlim = c(0, 1), 
                    # ylim = c(0.5, 20.5), 
                    expand = F, # removes white spaces at edge of plot
                    clip = 'off') + # allows drawing outside of panel

    # move x-axis title to the top and format
    scale_x_continuous(labels = function(x) format(x*100, digits=0, nsmall=0), 
                       breaks = seq(0, 1, 0.2),
                       position="top") + #breaks = seq(0, 1, 0.2)) +
    theme(axis.line.x = element_line(colour = "black"), 
          axis.ticks.x = element_line(colour = "black")) +
    #       axis.text = element_text(colour = unhighlighed_col_darker),
    #       text = element_text(colour = unhighlighed_col_darker),
    #       plot.title = element_text(colour = 'black')) +
    
    # format titles
    theme(plot.title = element_text(size = 26, face="bold"),
          plot.title.position = "plot", 
          axis.title.y = element_text(size=22), #face="bold"),
          axis.title.x = element_text(size=22), # face="bold"),
          axis.text.y = element_text(size = 14),
          axis.text.x = element_text(size = 14, angle=0)) +
    theme(legend.title = element_text(size=18),
          legend.text = element_text(size = 14),
          legend.position = "top",
          legend.box = "vertical")
}

```

@fig-mask-wearing shows results of the question "Was the contact wearing a mask?

```{r}
#| label: fig-mask-wearing
#| fig-cap: "Mask wearing"
#| fig-cap-location: bottom
#| fig-width: 13
#| fig-height: 6


fig1_masking <- contact_behav_fun(contact_behav, "contact_mask") +
  labs(title = "", # Was the contact wearing a mask?
       x = "% of contacts") 

fig1_masking
```

@fig-contact-duration shows results of the question "What was the duration of the contact?

```{r}
#| label: fig-contact-duration
#| fig-cap: "Duration of contact"
#| fig-cap-location: bottom
#| fig-width: 13
#| fig-height: 6

fig2_duration <- contact_behav_fun(contact_behav, "duration_contact")+
  labs(title = "", # What was the duration of the contact?
       x = "% of contacts") 
fig2_duration 
```

@fig-contact-type shows results of the question "Did you touch the contact?

```{r}
#| label: fig-contact-type
#| fig-cap: "Type of contact"
#| #| fig-cap-location: bottom
#| fig-width: 13
#| fig-height: 6


fig3_touch <- contact_behav_fun(contact_behav, "touch_contact") +
  labs(title = "", # Did you have a physical contact?
       x = "% of contacts") 

fig3_touch 
```

@fig-contact-location shows results of the question "Did the contact occur indoors or outdoors?"

```{r}
#| label: fig-contact-location
#| fig-cap: "Location of contact"
#| #| fig-cap-location: bottom
#| fig-width: 13
#| fig-height: 6

fig4_location <- contact_behav_fun(contact_behav, "where_contact") +
  labs(title = "", # Where did the contact occur?
       x = "% of contacts") 
fig4_location 
```

```{r}
#| label: bootstrap-averages
#| echo: false
#| warning: false
#| include: false
#| eval: false

### Bootstrapped mean (95% CI) and median (IQR) contacts

set.seed(30322) # rsph postcode
library(boot) # https://cran.r-project.org/doc/Rnews/Rnews_2002-3.pdf

gee_studysite <- c("Rural", "Urban")
gee_page <- c("<6mo", "6-11mo", "1-4y", "5-9y", "10-14y", "15-19y", "20-29y","30-39y","40-59y", "60+y")
gee_psex <- c("Male", "Female")
# gee_poccup <- c("Business", "Workers", "Preschool", "School", "Retired", "Unemployed", "Other")
# gee_peduc <- c("No education", "Primary", "Secondary", "College")
# gee_phhmembership <- c("Member", "Non-member")
# gee_dowgp <- c("Weekday", "Weekend")
# gee_pcvd <- c("No", "Yes") # if participant showed behavior change
# gee_phhsize <- c("1", "2-3", "4-5", "6+") # household size

# rural site
df_contact_d1_rural <- df_contact_d1 %>%
  dplyr::filter(study_site == "Rural") %>%
  distinct(rec_id, .keep_all=T)
sum(is.na(df_contact_d1$num_contacts)) # check for missing values in num_contacts. none.

# urban site
df_contact_d1_urban <- df_contact_d1 %>%
  dplyr::filter(study_site == "Urban") %>%
  distinct(rec_id, .keep_all=T)
sum(is.na(df_contact_d1$num_contacts)) # check for missing values in num_contacts. none.


# mean number of contacts and 95% confidence intervals for rural site
boot.mean <- function(x, i) {
 return (mean(x[i], na.rm = TRUE, round=1))
}

boot.median <- function(x,i) {
 return (median(x[i], na.rm = TRUE, round=1))
}


# here, if we use R=1000, we get an error. the small number of replications (1000) returns a vector on NA values.
# To sort this, we increase the number of bootstrap replications to 2000.
# we use the bootstrap CI function (boot.ci) to return CIs using the bias-corrected, accelerated (bca) function.

for(i in gee_studysite){
  mean.i = boot(subset(df_contact_d1, study_site == i)$num_contacts, 
           statistic = boot.mean, R = 10000)
  ci = boot.ci(mean.i, conf = 0.95, type = c("bca"))
  mean.i$t0 <- round(mean.i$t0, digits=1)
  lower.ci <- round(ci$bca[,4], digits=1)
  upper.ci <- round(ci$bca[,5], digits=1)
  print(paste(i, "Mean (95% CI:"))
  print(as.character(paste(mean.i$t0, " (",lower.ci, "-", upper.ci,")", sep="")))
  # save values
  # mean.i$mean_contact <- as.character(paste(mean.i$t0, " (",lower.ci, "-", upper.ci,")", sep=""))
  print("-----------------------------------------------------------")
}

# RURAL site====================================================================
 
# participant age
for(i in gee_page){
  mean.i = boot(subset(df_contact_d1_rural, participant_age == i)$num_contacts, 
           statistic = boot.mean, R = 10000)
  ci = boot.ci(mean.i, conf = 0.95, type = c("bca"))
  mean.i$t0 <- round(mean.i$t0, digits=1)
  lower.ci <- round(ci$bca[,4], digits=1)
  upper.ci <- round(ci$bca[,5], digits=1)
  print(paste(i, "Mean (95% CI:"))
  print(as.character(paste(mean.i$t0, " (",lower.ci, "-", upper.ci,")", sep="")))
  # save values
  # mean.i$mean_contact <- as.character(paste(mean.i$t0, " (",lower.ci, "-", upper.ci,")", sep=""))
  print("-----------------------------------------------------------")
}

# participant sex
for(i in gee_psex){
  mean.i = boot(subset(df_contact_d1_rural, participant_sex == i)$num_contacts, 
           statistic = boot.mean, R = 10000)
  ci = boot.ci(mean.i, conf = 0.95, type = c("bca"))
  mean.i$t0 <- round(mean.i$t0, digits=1)
  lower.ci <- round(ci$bca[,4], digits=1)
  upper.ci <- round(ci$bca[,5], digits=1)
  print(paste(i, "Mean (95% CI:"))
  print(as.character(paste(mean.i$t0, " (",lower.ci, "-", upper.ci,")", sep="")))
  # save values
  # mean.i$mean_contact <- as.character(paste(mean.i$t0, " (",lower.ci, "-", upper.ci,")", sep=""))
  print("-----------------------------------------------------------")
}


# URBAN site====================================================================

# participant age
for(i in gee_page){
  mean.i = boot(subset(df_contact_d1_urban, participant_age == i)$num_contacts, 
           statistic = boot.mean, R = 10000)
  ci = boot.ci(mean.i, conf = 0.95, type = c("bca"))
  mean.i$t0 <- round(mean.i$t0, digits=1)
  lower.ci <- round(ci$bca[,4], digits=1)
  upper.ci <- round(ci$bca[,5], digits=1)
  print(paste(i, "Mean (95% CI:"))
  print(as.character(paste(mean.i$t0, " (",lower.ci, "-", upper.ci,")", sep="")))
  # save values
  # mean.i$mean_contact <- as.character(paste(mean.i$t0, " (",lower.ci, "-", upper.ci,")", sep=""))
  print("-----------------------------------------------------------")
}

# participant sex
for(i in gee_psex){
  mean.i = boot(subset(df_contact_d1_urban, participant_sex == i)$num_contacts, 
           statistic = boot.mean, R = 10000)
  ci = boot.ci(mean.i, conf = 0.95, type = c("bca"))
  mean.i$t0 <- round(mean.i$t0, digits=1)
  lower.ci <- round(ci$bca[,4], digits=1)
  upper.ci <- round(ci$bca[,5], digits=1)
  print(paste(i, "Mean (95% CI:"))
  print(as.character(paste(mean.i$t0, " (",lower.ci, "-", upper.ci,")", sep="")))
  # save values
  mean.i$mean_contact <- as.character(paste(mean.i$t0, " (",lower.ci, "-", upper.ci,")", sep=""))
  print("-----------------------------------------------------------")
}
# 
# print("=MEDIANS============================================================")
# 
# 
# for(i in gee_studysite){
#   median.i = boot(subset(df_contact_d1, study_site == i)$num_contacts, 
#            statistic = boot.median, R = 100000)
#   ci = boot.ci(median.i, conf = 0.95, type = c("bca"))
#   median.i$t0 <- round(median.i$t0, digits=1)
#   lower.ci <- round(ci$bca[,4], digits=1)
#   upper.ci <- round(ci$bca[,5], digits=1)
#   print(paste(i, "Median (95% CI)"))
#   print(as.character(paste(median.i$t0, " (",lower.ci, "-", upper.ci,")", sep="")))
#   # save values
#   # mean.i$mean_contact <- as.character(paste(mean.i$t0, " (",lower.ci, "-", upper.ci,")", sep=""))
#   print("-----------------------------------------------------------")
# }
# 
# # RURAL site====================================================================
#  
# # participant age
# for(i in gee_page){
#   mean.i = boot(subset(df_contact_d1_rural, participant_age == i)$num_contacts, 
#            statistic = boot.mean, R = 10000)
#   ci = boot.ci(mean.i, conf = 0.95, type = c("bca"))
#   mean.i$t0 <- round(mean.i$t0, digits=1)
#   lower.ci <- round(ci$bca[,4], digits=1)
#   upper.ci <- round(ci$bca[,5], digits=1)
#   print(paste(i, "Mean (95% CI:"))
#   print(as.character(paste(mean.i$t0, " (",lower.ci, "-", upper.ci,")", sep="")))
#   # save values
#   # mean.i$mean_contact <- as.character(paste(mean.i$t0, " (",lower.ci, "-", upper.ci,")", sep=""))
#   print("-----------------------------------------------------------")
# }
# 
# # participant sex
# for(i in gee_psex){
#   mean.i = boot(subset(df_contact_d1_rural, participant_sex == i)$num_contacts, 
#            statistic = boot.mean, R = 10000)
#   ci = boot.ci(mean.i, conf = 0.95, type = c("bca"))
#   mean.i$t0 <- round(mean.i$t0, digits=1)
#   lower.ci <- round(ci$bca[,4], digits=1)
#   upper.ci <- round(ci$bca[,5], digits=1)
#   print(paste(i, "Mean (95% CI:"))
#   print(as.character(paste(mean.i$t0, " (",lower.ci, "-", upper.ci,")", sep="")))
#   # save values
#   # mean.i$mean_contact <- as.character(paste(mean.i$t0, " (",lower.ci, "-", upper.ci,")", sep=""))
#   print("-----------------------------------------------------------")
# }
# 
# 
# # URBAN site====================================================================
# 
# # participant age
# for(i in gee_page){
#   mean.i = boot(subset(df_contact_d1_urban, participant_age == i)$num_contacts, 
#            statistic = boot.mean, R = 10000)
#   ci = boot.ci(mean.i, conf = 0.95, type = c("bca"))
#   mean.i$t0 <- round(mean.i$t0, digits=1)
#   lower.ci <- round(ci$bca[,4], digits=1)
#   upper.ci <- round(ci$bca[,5], digits=1)
#   print(paste(i, "Mean (95% CI:"))
#   print(as.character(paste(mean.i$t0, " (",lower.ci, "-", upper.ci,")", sep="")))
#   # save values
#   # mean.i$mean_contact <- as.character(paste(mean.i$t0, " (",lower.ci, "-", upper.ci,")", sep=""))
#   print("-----------------------------------------------------------")
# }
# 
# # participant sex
# for(i in gee_psex){
#   mean.i = boot(subset(df_contact_d1_urban, participant_sex == i)$num_contacts, 
#            statistic = boot.mean, R = 10000)
#   ci = boot.ci(mean.i, conf = 0.95, type = c("bca"))
#   mean.i$t0 <- round(mean.i$t0, digits=1)
#   lower.ci <- round(ci$bca[,4], digits=1)
#   upper.ci <- round(ci$bca[,5], digits=1)
#   print(paste(i, "Mean (95% CI:"))
#   print(as.character(paste(mean.i$t0, " (",lower.ci, "-", upper.ci,")", sep="")))
#   # save values
#   mean.i$mean_contact <- as.character(paste(mean.i$t0, " (",lower.ci, "-", upper.ci,")", sep=""))
#   print("-----------------------------------------------------------")
# }


# #### Overall mean contact rate by site

## | Variable | Mean (95% CI)    |
## |----------|------------------|
## | Rural    | 13.0 (12.8-13.2) |
## | Urban    | 9.5 (9.4-9.7)    |
## 
## |     | Variable | Rural           | Urban          |
## |-----|----------|-----------------|----------------|
## | Sex |          |                 |                |
## |     | Female   | 9.0 (8.4-9.7)   | 6.8 (6.3-7.2)  |
## |     | Male     | 9.2 (8.6-9.8)   | 7.4 (7-7.9)    |
## | Age |          |                 |                |
## |     | 0-6mo    | 4.8 (3.8-5.9)   | 5.2 (4.4-6.3)  |
## |     | 6-11mo   | 7.0 (6-8.1)     | 5.8 (4.8-6.9)  |
## |     | 1-4y     | 6.1 (5.3-7.1)   | 5.7 (4.7-7)    |
## |     | 5-9y     | 10.1 (8.9-11.9) | 7.5 (6.5-8.7)  |
## |     | 10-14y   | 11.2 (10-12.8)  | 9.4 (8.5-10.5) |
## |     | 15-19y   | 13 (11.7-14.5)  | 9.9 (8.8-11.2) |
## |     | 20-29y   | 11.1 (9.7-12.8) | 7.2 (6.4-8)    |
## |     | 30-39y   | 9.5 (8.5-11.1)  | 7.5 (6.7-8.4)  |
## |     | 40-59y   | 11.2 (9.9-12.8) | 7.0 (6.4-7.8)  |
## |     | 60+      | 7.4 (6.3-8.9)   | 5.8 (5.1-6.7)  |

```

\
\

## Negative binomial mixed model for crude contact rate ratio (CRR)

```{r}
#| warning: false
#| echo: false
#| include: false
#| eval: false
library(devtools)

# install these packages only once
# install.packages("R.rsp")
# install_github("nyiuab/NBZIMM", force=T, build_vignettes=T)

library(NBZIMM)

df_contact_d1_rural <- df_contact_d1_rural %>%
  mutate(N = sum(num_contacts))

page.model <- glmm.nb(num_contacts ~ participant_sex + offset(log(N)), random = ~1 | rec_id, data = df_contact_d1_rural, verbose = TRUE)

```

# Proposed additional analysis {#sec-additional-analysis}

| Analysis                                        | Status |
|-------------------------------------------------|--------|
| Bootstrapped contact rates                      |        |
| Weighted contact matrices                       |        |
| Multivariate analysis (Negative binomial model) |        |
| Contact outlier analysis                        |        |
| Masking and contact reporting                   |        |
| Contacts vs indoor/outdoor locations            |        |
| Contacts by location of contact                 |        |
| National policy measure timelines               |        |
| Known vs unknown contacts over time             |        |
| Contacts by vaccination status                  |        |

:{tbl-colwidths="$$30/70$$"}
