---
title: "GlobalMix Mozambique Aim 2 participant data extraction."
author: "MC Kiti"
highlight-style: pygments
prefer-html: true
format:
  # pdf:
  #   toc: true
  #   toc-location: left
  #   number-sections: true
  #   toc-depth: 4
  #   code-fold: false
  #   fig-align: left
  html:
    toc: true
    toc-location: left
    number-sections: true
    toc-depth: 2
    code-fold: false
    fig-align: left
execute: 
  echo: false
editor: visual
date: today
---

```{r}
#| label: setup
#| echo: false
#| include: false
#| warning: false

rm(list=ls())
pacman::p_load(tidyr, dplyr, gtsummary, xlsx, readr)
```


```{r}
#| label: load-data
#| echo: false
#| include: false

participant_vars <- c("rec_id", "hh_id", "date_enrolled", 
                      "isindex", "aim", "study_site", "sensor_id", "hwid", 
                      "participant_sex", "age", "participant_age", "read_write",
                      "occupation", "enrolled_school", "highest_educ", 
                      "school_level", "transport_use", "hh_resp_exposure", 
                      "child", "child_breastfeed", "num_sibling")

data <- readRDS("../data/clean/participant_data_aim2.RDS") %>%
  select(any_of(participant_vars)) %>%
  mutate(isindex = case_when(isindex == 1 ~ 1,
                             TRUE ~ 0))


date_enrolled <- readRDS("../data/clean/household_survey_aim2.RDS") #%>%
# names(date_enrolled)

# THIS HAS BEEN MOVED TO MAIN CLEANING FILE
# # there are some records that we need to delete from the dataset
# drop_recid <- read_csv("../data/sensor_metadata/records_to_remove_09062022.csv",
#                        show_col_types = FALSE)
# 
# data <- subset(data, !(rec_id %in% drop_recid$rec_id))
# rm(drop_recid)
# 

# THIC CLEANING HAS BEEN DONE IN THE MAIN DATA CLEANING FILE.
# This file corrects hh_id entries. In REDCap, some individuals did not have a
# hh_id that corresponds to where they were recruited for the study. Hence, we
# used a masterfile Charfudin to create the correct hh_ids for each participant.
# source("../scripts/moz_hhid_corrections.R")

```

# Summary of raw data
The table below displays a summary of all participants from the Mozambique site as captured in REDCap.
```{r}
#| label: tbl-summary-participants-raw
#| echo: false
#| include: true
#| warning: false
#| tbl-cap: "Particiant raw data from Mozambique sites"

summary_aim2_raw <- data %>%
  select(study_site, isindex, participant_sex, participant_age, read_write,
         occupation, enrolled_school) %>%
  tbl_summary(by="study_site",
              statistic = list(all_continuous() ~ "{median ({IQR})"),
              percent="column",
              missing="ifany",
              digits = all_categorical() ~ 0) %>%
  bold_labels() %>%
  modify_header(label = "**Variable**") %>%
  modify_caption("")
summary_aim2_raw

```


# Cleaning the data

During data cleaning, several discrepancies including lost sensors (resulting in missing hwid, a crucial ID that links participant metadata to sensor data), mis-labelled sensors (wrong sensor_id), and mis-labelled household IDs (resulting in households with single members due to household ID mismatch). We use this script to extract participant metadata for further analysis.

## Lost sensors
```{r}
#| label: lost-sensors

# we lost some sensors and we do not have the hwids. let's identify these 
# individuals and see their characteristics then delete them from the data.
lost_sensorid <- c("041802E2", "077075CE", "0DD5BD3F", "16B7EA20", "1BF0AB62", 
                  "99FF6D3B", "A498A0A5", "B0834C7E", "BD848166", "BFAAAFE9", 
                  "E691CC38", "EC52843D", "F554A006", "FC1DE353")

lost_sensors_df <- data %>%
  filter(sensor_id %in% lost_sensorid) %>%
  select(rec_id, study_site, hh_id, isindex, sensor_id, participant_age, participant_sex,
         read_write, occupation, enrolled_school)

summary_lost_sensors <- lost_sensors_df %>%
  tbl_summary(by="study_site",
              percent="column",
              missing="ifany",
              digits = all_categorical() ~ 0) %>%
  bold_labels() %>%
  modify_header(label = "**Variable**") %>%
  modify_caption("")
summary_lost_sensors

# extract the rec_id associated with the lost sensors. these will be dropped from the main data. All the lost sensors do not have the sensor hwid extracted, hence we cannot merge the participant data to the sensor data.

lost_sensor_recid <- lost_sensors_df %>%
  select(rec_id)

# currently, we have 703 observations (300 urban).
data <- data %>%
  filter(!rec_id %in% lost_sensor_recid$rec_id)
# after dropping, we have 684 records (281 urban), so we have dropped 19 records.

rm(lost_sensor_recid, lost_sensorid)
```

All the `r nrow(lost_sensors_df)` individuals who lost sensors are from `r length(unique(lost_sensors_df$hh_id))` households in the urban site. Out of these, 5 households had \>2 sensors that were lost (1 had 3 missing and 1 had 4 missing). During sensor data cleaning, it will be important to take this into account for these households.

## Summary 2 of participant characteristics by site

@tbl-summary-participants shows the total number of individuals who were recruited into the study and their demographic characteristics by site.

```{r}
#| label: tbl-summary-participants
#| echo: false
#| include: true
#| warning: false
#| tbl-cap: "Particiant data from Mozambique sites"

summary_aim2 <- data %>%
  select(study_site, isindex, participant_sex, participant_age, read_write,
         occupation, enrolled_school) %>%
  tbl_summary(by="study_site",
              statistic = list(all_continuous() ~ "{median ({IQR})"),
              percent="column",
              missing="ifany",
              digits = all_categorical() ~ 0) %>%
  bold_labels() %>%
  modify_header(label = "**Variable**") %>%
  modify_caption("")
summary_aim2

# for occupation==unknown, need to categorize these accordingly.
# for enrolled_school, check the unknowns and fill in the category based on
# highest_educ and school level.
```

## Cleaning rural sensor metadata

Here, we clean the sensor participant data. Steps are: 1. Check that all the sensor_ids are available. 2. Replace sensor_id written incorrectly. These were identified visually and via code. 3. Drop records with inconsistent sensor_id and share with data managers for checks. 4. Merge with hwid data. This was extracted from the sensors by data managers. 5. Check missing sensor_id and hwid data. Export records for DMs to check.

```{r}
#| label: rural-sensor
#| echo: false
#| include: true
#| warning: false
rural_sensors <- data %>%
  filter(study_site == "Rural") 

# keep only unique rec_ids
rural_sensors <- rural_sensors %>%
  distinct(rec_id, .keep_all = TRUE)
n_rural <- nrow(rural_sensors)

# let us count the number of people per household in the raw data before any other manipulation
n_raw_rural_household_members <- rural_sensors %>%
  select(rec_id, hh_id) %>%
  group_by(hh_id) %>%
  summarise(n_redcap_raw=n())

# visual check
# knitr::kable(rural_sensors[,c("rec_id", "sensor_id")])

# check if there are some sensor ids with <8 or >8 digits.
id_count <- sapply(rural_sensors$sensor_id, function(x) nchar(gsub("[^[:alnum:]]", "", x)))
subset1_rural <- rural_sensors[id_count > 8,]
# knitr::kable(subset1_rural[,c("rec_id", "sensor_id")])

subset2_rural <- rural_sensors[id_count < 8,]
# knitr::kable(subset2_rural[,c("rec_id", "sensor_id")]) 
# None

rm(subset1_rural, subset2_rural, id_count)

# previously, I identified the following sensor_id that had been captured incorrectly.
# others we identified after merging the sensor_id and hwid dfs. corrections are done here.
rural_sensors$sensor_id[rural_sensors$sensor_id=="63DD440BD"] <- "63DD40BD"
rural_sensors$sensor_id[rural_sensors$sensor_id=="OC0516EA"] <- "0C0516EA"
rural_sensors$sensor_id[rural_sensors$sensor_id=="6F809378"] <-	"6F8093F8"
rural_sensors$sensor_id[rural_sensors$sensor_id=="6O4842FC"] <- "604842FC"
rural_sensors$sensor_id[rural_sensors$sensor_id=="9FDAO8E8"] <-	"9FDA08E8"
rural_sensors$sensor_id[rural_sensors$sensor_id=="6F809378"] <-	"6F8093F8"
rural_sensors$sensor_id[rural_sensors$sensor_id=="7O74A528"] <-	"7074A528"
rural_sensors$sensor_id[rural_sensors$sensor_id=="D54O1F13"] <-	"D5401F13"
rural_sensors$sensor_id[rural_sensors$sensor_id=="6O4842FC"] <-	"604842FC"
rural_sensors$sensor_id[rural_sensors$sensor_id=="O3OD199D"] <-	"030D199D"
rural_sensors$sensor_id[rural_sensors$sensor_id=="144BFE9O"] <-	"144BFE90"
rural_sensors$sensor_id[rural_sensors$sensor_id=="D36O933D"] <-	"D360933D"
rural_sensors$sensor_id[rural_sensors$sensor_id=="256E25CB"] <-	"256E23CB"
rural_sensors$sensor_id[rural_sensors$sensor_id=="9FDAO8E8"] <-	"9FDA08E8"
rural_sensors$sensor_id[rural_sensors$sensor_id=="D36O933D"] <-	"D360933D"
rural_sensors$sensor_id[rural_sensors$sensor_id=="O3OD199D"] <-	"030D199D"
rural_sensors$sensor_id[rural_sensors$sensor_id=="ADF8D142"] <-	"ADD8D142"
rural_sensors$sensor_id[rural_sensors$sensor_id=="63DD4OBD"] <-	"63DD40BD"
rural_sensors$sensor_id[rural_sensors$sensor_id=="D5401713"] <-	"D5401F13"
rural_sensors$sensor_id[rural_sensors$sensor_id=="OD9F0693"] <-	"0D9F0693"
rural_sensors$sensor_id[rural_sensors$sensor_id=="0601-034-17"] <- "1CF914EO"
rural_sensors$sensor_id[rural_sensors$sensor_id=="1503-124-01"] <- "D2510EC4"
# rural_sensors$sensor_id[rural_sensors$sensor_id=="3204-483-04"] <-
rural_sensors$sensor_id[rural_sensors$sensor_id=="3406-012-15"] <- "C959CE30"

# visual check revealed another discrepancy
# rural_sensors$sensor_id[rural_sensors$sensor_id=="3405-182-V4"] # no sensor records, delete entire household 
rural_sensors <- rural_sensors %>%
  filter(sensor_id != "3405-182-V4")

# check again if there are some sensor ids with <8 or >8 digits.
id_count <- sapply(rural_sensors$sensor_id, function(x) nchar(gsub("[^[:alnum:]]", "", x)))
subset1_rural <- rural_sensors[id_count > 8,]
# knitr::kable(subset1_rural[,c("rec_id", "sensor_id")])

subset2_rural <- rural_sensors[id_count < 8,]
# knitr::kable(subset2_rural[,c("rec_id", "sensor_id")]) 
# None

rm(subset1_rural, subset2_rural, id_count)
# ALL IS OK!!


### upload and merge with hwid data
rural_meta <- read.csv("../data/sensor_metadata/mozambique_rural_sensor_meta.csv") %>%
  # mark sensors that were used by staff. these will be deleted from the sensor data
  mutate(user = "fw",
         user = case_when(sensor_with_staff == "yes" ~ "staff",
                          TRUE ~ user)) %>%
  select(sensor_id, hwid, user)

rural_sensors <- rural_sensors %>%
  left_join(rural_meta, by="sensor_id") %>%
  distinct(rec_id, .keep_all = TRUE) %>%
  select(any_of(participant_vars))

# for now, we drop these records
drop_id_rural <- c("478", "942", "1004", "1263","1378", "1600", "6853",
                   # we also identified others from the sheet extracted above
                   "405", "407", "409", "416", "422", "443", "445", "468", 
                   "471", "473", "477", "479", "522", "523", "528", "530", 
                   "531", "1815", "1827", "1828", "6843", "6848", "6850") # , "867"

rural_sensors <- subset(rural_sensors, !(rec_id %in% drop_id_rural))

# extract and check characteristics of individuals with missing sensor_id and hwid
rural_missing_sensor_hwid <- rural_sensors %>%
  filter(is.na(sensor_id) | is.na(hwid)) %>%
  select(rec_id, date_enrolled, sensor_id, hwid, isindex, participant_sex, participant_age)

cat("There are", length(unique(rural_missing_sensor_hwid$sensor_id)), "sensors that do not have hwid data, used by", nrow(rural_missing_sensor_hwid), "individuals missing hwids, so we need to drop these.")
# length(unique(rural_missing_sensor_hwid$sensor_id)) # 25 sensors are missing hwids

rural_drop_sensorhwid <- rural_missing_sensor_hwid %>%
  select(sensor_id) %>%
  distinct(sensor_id)

rural_sensors <- rural_sensors %>%
  filter(!sensor_id %in% rural_missing_sensor_hwid$sensor_id)
############
# we exported and made some corrections.
# # export this for checking
# write.xlsx(rural_missing_sensor_hwid, 
#            file =  "../data/sensor_metadata/mozambique_missing_aim2_hwid.xlsx",
#            sheetName = "rural", 
#            append = FALSE, showNA = FALSE)
#############

# rm(rural_missing_sensor_hwid)

# table(rural_sensors$isindex) # we have 46 index children
length(unique(rural_sensors$hh_id)) # 61 households

# number of 
n_rural_hhid <- rural_sensors %>%
  group_by(hh_id) %>%
  summarise(n = n())
# show distribution
# ggplot(n_rural_hhid, aes(x=n)) + geom_histogram(bins=max(n_rural_hhid$n))

# # save rural participant metadata
# write.csv(rural_sensors,"../data/sensor_metadata/mozambique_aim2_rural_participants.csv")

# save unique sensor IDs used by rural participants
# rural_unique_sensors <- rural_sensors %>% 
#   select(sensor_id, hwid, study_site) %>%
#   distinct(sensor_id, .keep_all = TRUE)

# write.csv(rural_unique_sensors, "../data/sensor_metadata/mozambique_rural_unique_sensors.csv")

```

```{r}
#| label: rural-participants-summary

# summary of updated rural participants
rural_summary_aim2 <- rural_sensors %>%
  select(study_site, isindex, participant_sex, participant_age, read_write,
         occupation, enrolled_school) %>%
  tbl_summary(statistic = list(all_continuous() ~ "{median ({IQR})"),
              percent="column",
              missing="ifany",
              digits = all_categorical() ~ 0) %>%
  bold_labels() %>%
  modify_header(label = "**Variable**") %>%
  modify_caption("")
rural_summary_aim2
```

@tbl-rural-missing-ids shows the characteristics of individuals with missing sensor IDS and hwids (n=`r nrow(rural_missing_sensor_hwid)`).

```{r}
#| label: tbl-rural-missing-ids
#| echo: false
#| include: true
#| warning: false
#| tbl-cap: "Rural records missing sensor_id and hwid data"

rural_missing_sensorid_tbl <- rural_missing_sensor_hwid %>%
  select(isindex, participant_sex, participant_age) %>%
  tbl_summary(percent="column",
              digits = all_categorical() ~ 0) %>%
  bold_labels() %>%
  modify_header(label = "**Variable**") %>%
  modify_caption("**Dropped participants in rural area**")
rural_missing_sensorid_tbl
```

In total, there are `r n_rural` participants who were issued sensors from the rural site. Out of these, we have complete records for `r n_rural-nrow(rural_missing_sensor_hwid)`. This is after dropping records due to missing sensor_id and hwid.

::: callout-note
The hwid is an important identifier for the participants and is the primary key for the sensor data. Without the hwid, we cannot link the sensor data to the participant data collected in REDCap.
:::

## Cleaning urban sensor metadata

<!-- Check that all the sensor_ids are available. -->

```{r}
#| label: urban-sensor
#| echo: false
#| include: true
#| warning: false
urban_sensors <- data %>%
  filter(study_site == "Urban") %>%
  filter(!is.na(rec_id))


# previously, I identified the following sensor_id that had been captured incorrectly
urban_sensors$sensor_id[urban_sensors$sensor_id=="019664B1A"] <- "01964B1A"
urban_sensors$sensor_id[urban_sensors$sensor_id=="6CED070"] <- "6CECD070"
urban_sensors$sensor_id[urban_sensors$sensor_id=="90CBF5950"] <- "90CBF595"
urban_sensors$sensor_id[urban_sensors$sensor_id=="AD C6D682"] <- "ADC6D682"
urban_sensors$sensor_id[urban_sensors$sensor_id=="FDF9728"] <- "FDF97280"
urban_sensors$sensor_id[urban_sensors$sensor_id=="30BEADD1"] <- "30DEADD1"
urban_sensors$sensor_id[urban_sensors$sensor_id=="67FDE60EB"] <- "67FD60EB"
urban_sensors$sensor_id[urban_sensors$sensor_id=="A26CC63"] <- "A264CC63"
urban_sensors$sensor_id[urban_sensors$sensor_id=="B93D42E"] <- "B093D42E"
urban_sensors$sensor_id[urban_sensors$sensor_id=="16D7EAB20"] <- "16B7EA20"
urban_sensors$sensor_id[urban_sensors$sensor_id=="EDC58AE4"] <- "E2C58AE4"
urban_sensors$sensor_id[urban_sensors$sensor_id=="612540B1"] <- "612514B1"
urban_sensors$sensor_id[urban_sensors$sensor_id=="B287D421"] <- "B287D42A"
urban_sensors$sensor_id[urban_sensors$sensor_id=="B648ADGB"] <- "B648ADEB"
urban_sensors$sensor_id[urban_sensors$sensor_id=="6B592F7D"] <- "6BDA8DED"
urban_sensors$sensor_id[urban_sensors$sensor_id=="93GF89E6"] <- "93EF89E6"
urban_sensors$sensor_id[urban_sensors$sensor_id=="7201G52B"] <- "7201E52B"
urban_sensors$sensor_id[urban_sensors$sensor_id=="D2495E5F"] <- "D2495E9F"
urban_sensors$sensor_id[urban_sensors$sensor_id=="DFB00C63"] <- "D7B00C63"
urban_sensors$sensor_id[urban_sensors$sensor_id=="E290C88D"] <- "E290C8BD"
urban_sensors$sensor_id[urban_sensors$sensor_id=="777F3576"] <- "775F3576"
urban_sensors$sensor_id[urban_sensors$sensor_id=="93EF89E9"] <- "93EF89E6"
urban_sensors$sensor_id[urban_sensors$sensor_id=="BO93D42E"] <- "B093D42E"
urban_sensors$sensor_id[urban_sensors$sensor_id=="D4D84F9F"] <- "D4D84F97"
urban_sensors$sensor_id[urban_sensors$sensor_id=="77DE60EB"] <- "7FDE60EB"
urban_sensors$sensor_id[urban_sensors$sensor_id=="FQ29ABE0"] <- "FO29ABE0"
urban_sensors$sensor_id[urban_sensors$sensor_id=="6373E09A"] <- "6375E09A"
urban_sensors$sensor_id[urban_sensors$sensor_id=="67FD60EB"] <- "7FDE60EB"
urban_sensors$sensor_id[urban_sensors$sensor_id=="7029ABE0"] <- "F029ABE0"
urban_sensors$sensor_id[urban_sensors$sensor_id=="3C114B9C"] <- "3C114B9E"
urban_sensors$sensor_id[urban_sensors$sensor_id=="73AOD657"] <- "73A0D657"


# visual check
# knitr::kable(urban_sensors[,c("rec_id", "sensor_id")])

id_count <- sapply(urban_sensors$sensor_id, function(x) nchar(gsub("[^[:alnum:]]", "", x)))
subset1_urban <- urban_sensors[id_count > 8,]
# knitr::kable(subset1_urban[,c("rec_id", "sensor_id")])
# ok, 9 NAs

subset2_urban <- urban_sensors[id_count < 8,]
# knitr::kable(subset2_urban[,c("rec_id", "sensor_id")]) 
cat("We have 9 records that have sensor id == 0.")


# By visual inspection with the master file, I was able to retrieve sensor_id 
# data for 1724 and 1026. However, we drop rec_id 1725 because it was listed as 
# having the same sensor ID as 1727, the index in hh_id QULNM4015

urban_sensors$sensor_id[urban_sensors$rec_id=="1026"] <- "CF152F0F"
urban_sensors$sensor_id[urban_sensors$rec_id=="1724"] <- "993564AB"

#  so for now, we drop these 8 records that have sensor_id==0
drop_id_urban <- c("249", "1650", "1721","5814", "1719", "1720", "1722",
                   "1725") # 8
urban_sensors <- subset(urban_sensors, !(rec_id %in% drop_id_urban))

# delete duplicates, if any
urban_sensors <- urban_sensors %>%
  distinct(rec_id, .keep_all = TRUE)

n_urban <- nrow(urban_sensors)
cat("there now are", n_urban, "individuals with sensors")

# let us count the number of people per household in the raw data before any other manipulation
n_raw_urban_household_members <- urban_sensors %>%
  select(rec_id, hh_id) %>%
  group_by(hh_id) %>%
  summarise(n_redcap_raw=n())

cat("There are", nrow(n_raw_urban_household_members), "households listed in the 
    urban area, and 7 have only 1 member listed.")


### upload and merge with hwid data
urban_meta <- read.csv("../data/sensor_metadata/mozambique_urban_sensor_meta.csv") %>%
  # mark sensors that were used by staff. these will be deleted from the sensor data
  mutate(user = "fw",
         user = case_when(sensor_with_staff == "yes" ~ "staff",
                          TRUE ~ user)) %>%
  select(sensor_id, hwid, user)

urban_sensors <- urban_sensors %>%
  left_join(urban_meta, by="sensor_id") %>%
  distinct(rec_id, .keep_all = TRUE) %>%
  select(any_of(participant_vars))

# extract rec_id, sensor_id for rec_ids without hwid
urban_missing_hwid <- urban_sensors %>%
  filter(is.na(hwid)) %>%
  select(rec_id, isindex, sensor_id, hwid)

# check characteristics of individuals with missing sensor_id
urban_missing_sensorid <- urban_sensors %>%
  filter(is.na(sensor_id) | is.na(hwid)) %>%
  select(rec_id, date_enrolled, sensor_id, hwid, isindex, participant_sex, participant_age)

# ###### the below was checked and corrected. so we are now working with corrected data.
# # export this for checking
# write.xlsx(urban_missing_sensorid, 
#            file =  "../data/sensor_metadata/mozambique_missing_aim2_hwid.xlsx",
#            sheetName = "urban", 
#            append = TRUE, showNA = FALSE)
########

# additional visual check
# View(urban_missing_sensorid)

urban_missing_recid <- c(736, 909, 1109, 1110, 1111, 1486, 1493, 1494, 1495, 
                         1510, 1511, 1631)

cat("visual check reveals", length(urban_missing_recid), "missing sensor ids (9)
    or missing hwid (12). So, we drop these.")

urban_sensors <- urban_sensors %>%
  filter(!rec_id %in% urban_missing_recid)

cat("So we now have", nrow(urban_sensors), "complete records from the urban site.")


# # save urban participant metadata
# write.csv(urban_sensors,"../data/sensor_metadata/mozambique_aim2_urban_participants.csv")

# save unique sensor IDs used by urban participants
# urban_unique_sensors <- urban_sensors %>%
#   select(sensor_id, hwid, study_site) %>%
#   distinct(sensor_id, .keep_all = TRUE)
# 
# write.csv(urban_unique_sensors, "../data/sensor_metadata/mozambique_urban_unique_sensors.csv")
```

In total, there are `r n_urban` participants who were issued sensors from the urban site. Out of these, we have complete records for `r n_urban-nrow(urban_missing_sensorid)`. This is after dropping records due to missing sensor_id and hwid.

@tbl-urban-missing-ids shows the characteristics of individuals with missing sensor IDS and hwids (n=`r nrow(rural_missing_sensor_hwid)`).

```{r}
#| label: tbl-urban-missing-ids
#| echo: false
#| include: true
#| warning: false
#| tbl-cap: "Urban records missing sensor_id and hwid data"

urban_missing_sensorid_tbl <- urban_missing_sensorid %>%
  select(isindex, participant_sex, participant_age) %>%
  tbl_summary(percent="column",
              digits = all_categorical() ~ 0) %>%
  bold_labels() %>%
  modify_header(label = "**Variable**") %>%
  modify_caption("")
urban_missing_sensorid_tbl

```

### Cleaning household IDs 
The last step involves confirming that data from all 3 sources overlap. The 3 sources are REDCap (participant data), zipped sensor files (raw sensor data), and h5 files (sensor data that has been decompressed and extracted into usable data for analysis).

#### Rural site
```{r}
#| label: rural-household-ids

cat("Here, we want to find out households thatn are present in all the raw files i.e.
    zipped, unzipped, h5 and REDCap database. This is because I was having a hard time reconciling the number of households particularly from REDCap. In some cases, there were households with only 1 individual. this exercise below will enable me to hopefully get households with complete data.")

cat("There are", length(unique(rural_sensors$hh_id)), "households in the rural 
    area. This means that there are individuals who migrated from one household
    and were now living in a new household, but their perm_id was not updated to
    reflect the move to the new household.")

n_rural_household_members <- rural_sensors %>%
  select(rec_id, hh_id) %>%
  group_by(hh_id) %>%
  summarise(n=n())
cat("There are 2 households with only 1 member. This should not be the case.")


# extract the file names in the raw folder.
unzip_path <- c("/Users/mck/Library/CloudStorage/OneDrive-EmoryUniversity/4.Data and Analysis/GlobalMix/Mozambique/Quantitative/Aim_2/main_study_raw_data/rural/raw/unzip/backup_05032022/")
zip_path <- c("/Users/mck/Library/CloudStorage/OneDrive-EmoryUniversity/4.Data and Analysis/GlobalMix/Mozambique/Quantitative/Aim_2/main_study_raw_data/rural/raw/zip/")
h5_path <- c("/Users/mck/Library/CloudStorage/OneDrive-EmoryUniversity/4.Data and Analysis/GlobalMix/Mozambique/Quantitative/Aim_2/main_study_raw_data/rural/raw/h5_07082022/")

# library(stringr)
# filterr <- c("SM-rural-supervisors-files-20210727102207",
#              "SM-rural-supervisors-files-20210811091335",
#              "SM-manhica_supervisors-files-20210727102207",
#              "SM-manhica_supervisors-files-20210811091335",
#              "infants_only",
#              "Household sensor ID list comparision.xlsx",
#              "deleted duplicated")
#              
rural_unzip_hmid <- as.data.frame(list.files(path = paste(unzip_path))) %>%
  rename(hmid_unzip = names(.[1])) %>%
  # filter(!hmid_unzip %in% unlist(filterr)) %>%
  mutate(hmid_unzip = substr(hmid_unzip, start = 10, stop=nchar(hmid_unzip))) %>%
  # str_replace_all("_", "-") %>%
  na.omit()

rural_zip_hmid <- as.data.frame(list.files(path = paste(zip_path))) %>%
  rename(hmid_zip = names(.[1])) %>%
  # filter(!hmid_zip %in% unlist(filterr)) %>%
  mutate(hmid_zip = substr(hmid_zip, start = 12, stop=nchar(hmid_zip)-25)) %>%
  # gsub("_", "-", .) %>%
  na.omit()

rural_h5_hmid <- as.data.frame(list.files(path = paste(h5_path))) %>%
  rename(hmid_h5 = names(.[1])) %>%
  # filter(!hmid_h5 %in% unlist(filterr)) %>%
  mutate(hmid_h5 = substr(hmid_h5, start = 10, stop=nchar(hmid_h5)-8)) %>%
  # str_replace_all("_", "-") %>%
  na.omit()

rural_redcap_hmid <- rural_sensors %>%
  select(hh_id) %>% rename(hmid_redcap = hh_id) %>%
  distinct(hmid_redcap) %>%
  na.omit()

rural_hmid_check <- full_join(rural_zip_hmid , rural_unzip_hmid, 
                              by = c("hmid_zip" = "hmid_unzip"),
                              keep = TRUE)
rural_hmid_check <- full_join(rural_hmid_check, rural_h5_hmid, 
                              by = c("hmid_zip" = "hmid_h5"),
                              keep = TRUE)
rural_hmid_check <- full_join(rural_hmid_check, rural_redcap_hmid, 
                              by = c("hmid_zip" = "hmid_redcap"),
                              keep = TRUE)

# now, extract only the households that appear in all 3 datasets.
rural_complete_hmid <- rural_hmid_check[complete.cases(rural_hmid_check), ]

# now, from the main rural_sensor data, extract households appearing on the list above.
rural_sensors_complete <- rural_sensors %>%
  filter(hh_id %in% rural_complete_hmid$hmid_zip)

cat("After this cleaning up, now there are", length(unique(rural_sensors_complete$hh_id)), "households in the rural area.")

n_rural_household_members_complete <- rural_sensors_complete %>%
  select(rec_id, hh_id) %>%
  group_by(hh_id) %>%
  summarise(n_hhid_complete = n())

rural_hh_size <- n_raw_rural_household_members %>%
  left_join( n_rural_household_members_complete, by = "hh_id")

# How many individuals per household? 
cat("There are still 2 households with only 1 member.")

# write.xlsx(rural_hh_size,
#            file =  "../data/sensor_metadata/mozambique_hh_size_check.xlsx",
#            sheetName = "rural_hhsize_check",
#            append = FALSE, showNA = FALSE)
# 
# write.xlsx(rural_hmid_check,
#            file =  "../data/sensor_metadata/mozambique_hh_size_check.xlsx",
#            sheetName = "rural_hmid_check",
#            append = TRUE, showNA = FALSE)
############


# save rural participant metadata
write.csv(rural_sensors_complete,"../data/sensor_metadata/mozambique_aim2_rural_participants.csv")

```

#### Urban site
```{r}
#| label: urban-household-ids

cat("There are", length(unique(urban_sensors$hh_id)), "households in the urban 
    area. This means that there are individuals who migrated from one household
    and were now living in a new household, but their perm_id was not updated to
    reflect the move to the new household.")

n_urban_household_members <- urban_sensors %>%
  select(rec_id, hh_id) %>%
  group_by(hh_id) %>%
  summarise(n=n())
urban_hhsize_2 <- n_urban_household_members %>%
  filter(n < 2)
cat("There are", nrow(urban_hhsize_2), "households with 1 member. There should 
    not be households with only 1 member (11).")


# extract the file names in the raw folder.
unzip_path <- c("/Users/mck/Library/CloudStorage/OneDrive-EmoryUniversity/4.Data and Analysis/GlobalMix/Mozambique/Quantitative/Aim_2/main_study_raw_data/urban/raw/unzip/")
zip_path <- c("/Users/mck/Library/CloudStorage/OneDrive-EmoryUniversity/4.Data and Analysis/GlobalMix/Mozambique/Quantitative/Aim_2/main_study_raw_data/urban/raw/zip/")
h5_path <- c("/Users/mck/Library/CloudStorage/OneDrive-EmoryUniversity/4.Data and Analysis/GlobalMix/Mozambique/Quantitative/Aim_2/main_study_raw_data/urban/raw/h5_07082022/")

             
urban_unzip_hmid <- as.data.frame(list.files(path = paste(unzip_path))) %>%
  rename(hmid_unzip = names(.[1])) %>%
  # filter(!hmid_unzip %in% unlist(filterr)) %>%
  mutate(hmid_unzip = substr(hmid_unzip, start = 10, stop=nchar(hmid_unzip))) %>%
  # str_replace_all("_", "-") %>%
  na.omit()

urban_zip_hmid <- as.data.frame(list.files(path = paste(zip_path))) %>%
  rename(hmid_zip = names(.[1])) %>%
  # filter(!hmid_zip %in% unlist(filterr)) %>%
  mutate(hmid_zip = substr(hmid_zip, start = 10, stop=nchar(hmid_zip)-25)) %>%
  # gsub("_", "-", .) %>%
  na.omit()

urban_h5_hmid <- as.data.frame(list.files(path = paste(h5_path))) %>%
  rename(hmid_h5 = names(.[1])) %>%
  # filter(!hmid_h5 %in% unlist(filterr)) %>%
  mutate(hmid_h5 = substr(hmid_h5, start = 10, stop=nchar(hmid_h5)-8)) %>%
  # str_replace_all("_", "-") %>%
  na.omit()

urban_redcap_hmid <- urban_sensors %>%
  select(hh_id) %>% rename(hmid_redcap = hh_id) %>%
  distinct(hmid_redcap) %>%
  na.omit()

urban_hmid_check <- full_join(urban_zip_hmid , urban_unzip_hmid, 
                              by = c("hmid_zip" = "hmid_unzip"),
                              keep = TRUE)
urban_hmid_check <- full_join(urban_hmid_check, urban_h5_hmid, 
                              by = c("hmid_zip" = "hmid_h5"),
                              keep = TRUE)
urban_hmid_check <- full_join(urban_hmid_check, urban_redcap_hmid, 
                              by = c("hmid_zip" = "hmid_redcap"),
                              keep = TRUE)

# now, extract only the households that appear in all 3 datasets.
urban_complete_hmid <- urban_hmid_check[complete.cases(urban_hmid_check), ]

# now, from the main urban_sensor data, extract households appearing on the list above.
urban_sensors_complete <- urban_sensors %>%
  filter(hh_id %in% urban_complete_hmid$hmid_zip)

cat("After this cleaning up, now there are", length(unique(urban_sensors_complete$hh_id)), "households in the urban area.")

n_urban_household_members_complete <- urban_sensors_complete %>%
  select(rec_id, hh_id) %>%
  group_by(hh_id) %>%
  summarise(n_hhid_complete = n())

urban_hh_size <- n_raw_urban_household_members %>%
  left_join( n_urban_household_members_complete, by = "hh_id")

# How many individuals per household? 
cat("There are 6 households with 1 member.")

write.xlsx(urban_hh_size,
           file =  "../data/sensor_metadata/mozambique_urban_hh_size_check.xlsx",
           sheetName = "urban_hhsize_check",
           append = FALSE, showNA = FALSE)

write.xlsx(urban_hmid_check,
           file =  "../data/sensor_metadata/mozambique_urban_hh_size_check.xlsx",
           sheetName = "urban_hmid_check",
           append = TRUE, showNA = FALSE)
############


# save final urban household file
# # save urban participant metadata
write.csv(urban_sensors_complete,"../data/sensor_metadata/mozambique_aim2_urban_participants.csv")

```

## Final dataset

```{r}
final_participants <- rbind(rural_sensors_complete, urban_sensors_complete)

summary_aim2_final <- final_participants %>%
  select(study_site, isindex, participant_sex, participant_age, read_write,
         occupation, enrolled_school) %>%
  tbl_summary(by="study_site",
              statistic = list(all_continuous() ~ "{median ({IQR})"),
              percent="column",
              missing="ifany",
              digits = all_categorical() ~ 0) %>%
  bold_labels() %>%
  modify_header(label = "**Variable**") %>%
  modify_caption("")
summary_aim2_final

```
