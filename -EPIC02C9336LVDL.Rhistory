"location_contact_d2_hh___1", "location_contact_d2_hh___2",
"location_contact_d2_hh___3", "location_contact_d2_hh___4",
"location_contact_d2_hh___5", "location_contact_d2_hh___6",
"location_contact_d2_hh___7", "location_contact_d2_hh___8",
"location_contact_d2_hh___9", "location_contact_d2_hh___10",
"location_contact_d2_hh___11", "location_contact_other_d2",
"contact_id" )
# merge d1 and d2 household contact data
cont_d1_hh <- cont_d1_hh[which(cont_d1_hh$contact_id_d1_hh == 0),] # | cont_d1_hh$contact_id_d1_hh == 1
cont_d2_hh <- cont_d2_hh[which(cont_d2_hh$contact_id_d2_hh == 0),]
# delete the _d1_hh tag from each var name
names(cont_d1_hh)[grep("_d1_hh", names(cont_d1_hh))] <- gsub("_d1_hh", "",
names(cont_d1_hh)[grep("_d1_hh", names(cont_d1_hh))])
# delete the _d1_hh tag from each var name
names(cont_d1_hh)[grep("_d1_hh", names(cont_d1_hh))] <- gsub("_d1_hh", "",
names(cont_d1_hh)[grep("_d1_hh", names(cont_d1_hh))])
names(cont_d1_hh)[25] <- "location_contact_other"
names(cont_d2_hh)[grep("_d2_hh", names(cont_d2_hh))] <- gsub("_d2_hh", "",
names(cont_d2_hh)[grep("_d2_hh", names(cont_d2_hh))])
names(cont_d2_hh)[25] <- "location_contact_other"
# specify contact day and merge d1 and d2 data
cont_d1_hh$Day1or2 <- 1
cont_d2_hh$Day1or2 <- 2
contact_hh_all <- rbind(cont_d1_hh, cont_d2_hh) # 3535
contact_hh_all$hh_membership <- "Member"
contact_hh_all <- contact_hh_all[-which(is.na(contact_hh_all$hh_member_name)),] # 14 records deleted without names
contact_hh_all <- rbind(cont_d1_hh, cont_d2_hh) # 2086
contact_hh_all$hh_membership <- "Member"
names(contact_hh_all)
View(contact_hh_all)
# generate day 1 contacts
for (i in 1:30) {
nam <- paste("c", i, sep = ".")
assign(nam, data %>%
dplyr::filter(redcap_event_name == "day_1_diary_arm_1") %>%
dplyr::select("rec_id","individual_id","redcap_event_name",
"redcap_repeat_instrument","redcap_repeat_instance",
ends_with(paste0("_d1_hh_",i)),
starts_with(paste0("location_contact_d1_hh_", i, "___")), paste0("location_contact_other_d1_", i)) %>%
dplyr::filter(is.na(redcap_repeat_instrument)) %>%
left_join(contact_name_full[which(contact_name_full$hh_member_id==i),], by="rec_id"))
}
names(c.1) <- str_remove(names(c.1), "_1")
names(c.2) <- str_remove(names(c.2), "_2")
names(c.3) <- str_remove(names(c.3), "_3")
names(c.4) <- str_remove(names(c.4), "_4")
names(c.5) <- str_remove(names(c.5), "_5")
names(c.6) <- str_remove(names(c.6), "_6")
names(c.7) <- str_remove(names(c.7), "_7")
names(c.8) <- str_remove(names(c.8), "_8")
names(c.9) <- str_remove(names(c.9), "_9")
names(c.10) <- str_remove(names(c.10), "_10")
names(c.11) <- str_remove(names(c.11), "_11")
names(c.12) <- str_remove(names(c.12), "_12")
names(c.13) <- str_remove(names(c.13), "_13")
names(c.14) <- str_remove(names(c.14), "_14")
names(c.15) <- str_remove(names(c.15), "_15")
names(c.16) <- str_remove(names(c.16), "_16")
names(c.17) <- str_remove(names(c.17), "_17")
names(c.18) <- str_remove(names(c.18), "_18")
names(c.19) <- str_remove(names(c.19), "_19")
names(c.20) <- str_remove(names(c.20), "_20")
names(c.21) <- str_remove(names(c.21), "_21")
names(c.22) <- str_remove(names(c.22), "_22")
names(c.23) <- str_remove(names(c.23), "_23")
names(c.24) <- str_remove(names(c.24), "_24")
names(c.25) <- str_remove(names(c.25), "_25")
names(c.26) <- str_remove(names(c.26), "_26")
names(c.27) <- str_remove(names(c.27), "_27")
names(c.28) <- str_remove(names(c.28), "_28")
names(c.29) <- str_remove(names(c.29), "_29")
names(c.30) <- str_remove(names(c.30), "_30")
cont_d1_hh <- rbind(c.1,c.2,c.3,c.4,c.5,c.6,c.7,c.8,c.9,c.10,c.11,c.12,c.13,c.14,
c.15,c.16,c.17,c.18,c.19,c.20,c.21,c.22,c.23,c.24,c.25,c.26,
c.27,c.28,c.29,c.30)
cont_d1_hh <- cont_d1_hh[which(!is.na(cont_d1_hh$contact_id_d1_hh)),]
rm(c.1,c.2,c.3,c.4,c.5,c.6,c.7,c.8,c.9,c.10,c.11,c.12,c.13,c.14,
c.15,c.16,c.17,c.18,c.19,c.20,c.21,c.22,c.23,c.24,c.25,c.26,
c.27,c.28,c.29,c.30)
cont_d1_hh <- cont_d1_hh %>%
# filter(redcap_repeat_instrument == "informaes_sobre_os_membros_da_famlia") %>%
filter(rec_id %in% participant_ids) %>%
group_by(rec_id) %>%
mutate(hh_member_id = cur_group_id()) %>%
ungroup() %>%
group_by(rec_id) %>%
mutate(n=1:n()) %>%
mutate(contact_id = paste(hh_member_id, n, sep="-")) %>%
select("rec_id","individual_id", "redcap_event_name", "redcap_repeat_instrument",
"redcap_repeat_instance", "contact_id_d1_hh", "touch_contact_d1_hh",
"where_contact_d1_hh", "contact_mask_d1_hh", "duration_contact_d1_hh",
"frequency_contact_d1_hh", "known_contact_d1_hh", "location_contact_d1_hh___0",
"location_contact_d1_hh___1", "location_contact_d1_hh___2",
"location_contact_d1_hh___3", "location_contact_d1_hh___4",
"location_contact_d1_hh___5", "location_contact_d1_hh___6",
"location_contact_d1_hh___7", "location_contact_d1_hh___8",
"location_contact_d1_hh___9", "location_contact_d1_hh___10",
"location_contact_d1_hh___11", "location_contact_other_d1",
"contact_id" )
install.packages("gtsummary")
#| label: load-environment
#| include: false
#| warning: false
rm(list=ls())
source("../scripts/00_load_libraries.R")
participants <- readRDS("../data/clean/participant_data_aim1.RDS")
contacts <- readRDS("../data/clean/contact_data_aim1.RDS")
#| include: false
#| warning: false
#| echo: false
## Subset contacts to the IDs in participant list only
contacts <- contacts %>%
dplyr::filter(rec_id %in% unlist(participants$rec_id))
# Filter contact relationship == self (you cannot have a contact with yourself)
contacts <- contacts %>%
dplyr::filter(hh_member_relationship != "Self")
# relationship
contacts$hh_membership <- factor(contacts$hh_membership,
levels = c("Member", "Non-member"))
# recategorize contact locations
contacts <- contacts %>%
mutate(cnt_home = ifelse(location_contact___0==1, 1,0),
cnt_school = ifelse(location_contact___2==1, 1,0),
cnt_work = ifelse(location_contact___3==1, 1,0),
cnt_otherplace = ifelse(location_contact___1==1 |
location_contact___4==1 |
location_contact___5==1 |
location_contact___6==1 |
location_contact___7==1 |
location_contact___8==1 |
location_contact___9==1 |
location_contact___10==1 |
location_contact___11==1,1,0))
# masking
contacts <- contacts %>%
mutate(contact_mask2 = case_when(contact_mask == "Yes, for the entire encounter" ~ "Yes",
contact_mask == "Yes, during parts of encounter" ~ "Yes",
contact_mask == "No mask was worn during the encounter" ~ "No",
TRUE ~ "Can't recall"))
contacts$contact_mask2 <- factor(contacts$contact_mask2, levels = c("Yes", "No",
"Can't recall"))
contacts$cnt_home <- factor(contacts$cnt_home, levels = c(1, 0),
labels = c("Yes", "No"))
contacts$cnt_work <- factor(contacts$cnt_work, levels = c(1, 0),
labels = c("Yes", "No"))
contacts$cnt_school <- factor(contacts$cnt_school, levels = c(1, 0),
labels = c("Yes", "No"))
contacts$cnt_otherplace <- factor(contacts$cnt_otherplace, levels = c(1, 0),
labels = c("Yes", "No"))
# generate data strata by COVID-19 period
## Looks like some issues with this where surveydate not matching exactly with Day 1 or2
first_survey_date <- contacts %>%
dplyr::select(rec_id, survey_date) %>%
dplyr::arrange(rec_id, survey_date) %>%
dplyr::group_by(rec_id) %>%
slice(n=1) %>%
dplyr::rename(dt_diaryd1 = survey_date) %>%
mutate(pand_period = case_when(dt_diaryd1 <= as.Date("2021-6-1") ~ "lull1",
dt_diaryd1 <= as.Date("2021-7-31") ~ "inc_delta",
dt_diaryd1 <= as.Date("2021-9-28") ~ "dec_delta",
dt_diaryd1 <= as.Date("2021-12-8") ~ "lull2",
dt_diaryd1 <= as.Date("2022-1-6") ~ "inc_omi",
dt_diaryd1 <= as.Date("2022-2-6") ~ "dec_omi",
dt_diaryd1 <= as.Date("2022-6-1") ~ "lull3",
TRUE ~ NA_character_),
pand_period_simp = case_when(dt_diaryd1 <= as.Date("2021-6-1") ~ "lull",
dt_diaryd1 <= as.Date("2021-7-31") ~ "wave",
dt_diaryd1 <= as.Date("2021-9-28") ~ "wave",
dt_diaryd1 <= as.Date("2021-12-8") ~ "lull",
dt_diaryd1 <= as.Date("2022-1-6") ~ "wave",
dt_diaryd1 <= as.Date("2022-2-6") ~ "wave",
dt_diaryd1 <= as.Date("2022-6-1") ~ "lull",
TRUE ~ NA_character_),
pand_period_simp1 = case_when(
dt_diaryd1 <= as.Date("2021-6-1") ~ "lull",
dt_diaryd1 <= as.Date("2021-7-31") ~ "inc",
dt_diaryd1 <= as.Date("2021-9-28") ~ "dec",
dt_diaryd1 <= as.Date("2021-12-8") ~ "lull",
dt_diaryd1 <= as.Date("2022-1-6") ~ "inc",
dt_diaryd1 <= as.Date("2022-2-6") ~ "dec",
dt_diaryd1 <= as.Date("2022-6-1") ~ "lull",
TRUE ~ NA_character_ ))
# total number of participants per site
N <- nrow(participants)
N_rural <- nrow(participants %>% dplyr::filter(study_site == "Rural"))
N_urban <- nrow(participants %>% dplyr::filter(study_site == "Urban"))
#| label: tbl-participant-summary
#| tbl-cap: "Participant summary"
#| include: false
#| warning: false
label(participants$study_site) <- "Site"
label(participants$aim) <- "Aim"
label(participants$participant_sex) <- "Sex"
# label(participants$age) <- "Exact age"
label(participants$participant_age) <- "Participant age"
label(participants$read_write) <- "Able to read and write"
label(participants$enrolled_school) <- "Currently enrolled in school"
label(participants$highest_educ) <- "Highest education level attained"
label(participants$school_level) <- "Current school level"
# label(participants$transport_use) <- "Transport use last 3 months"
label(participants$occupation) <- "Occupation"
label(participants$age_symptom) <- "Acute gastroenteritis (diarrhea)"
label(participants$ari_symptom) <- "Acute respiratory infection"
table1 <- participants %>%
# dplyr::filter(aim==1) %>%
dplyr::select(study_site, participant_sex, participant_age,  read_write,
enrolled_school, occupation, age_symptom, ari_symptom) %>% # day_of_week, year, study_site
tbl_summary(by=study_site,
percent="column",
digits = all_categorical() ~ 0,
missing="ifany") %>%
add_overall() %>%
bold_labels() %>%
modify_header(label = "") %>%
modify_spanning_header(c("stat_1", "stat_2") ~ "**Site**")
# %>% modify_caption("**Table 1: Baseline characteristics of participants in Mozambique**")
# check homemaker, college
# ## save table as text
# table1
#| label: fig-participant-summary-agesex
#| fig-cap: "Participant age and sex distribution"
#| include: true
#| warning: false
source("../scripts/00_baseline_plot_functions.R")
# Sex by participant_age
sex_page <- participants %>%
group_by(participant_sex, participant_age, study_site) %>%
dplyr::summarise(total = n(), .groups = "drop") %>%
na.omit()
# sex_page_plt <- fun_sex_plot(sex_page) +
#       scale_color_manual(values = c("#E7B800", "#2E9FDF")) +
#       geom_vline(xintercept=0.5, linetype="dashed")
library(grid)
sex_page_plt2 <- sex_page %>%
ggplot(., aes(x=participant_age, y=total, fill=participant_sex)) +
geom_bar(aes(x = participant_age, y = total, fill = participant_sex),
position = "stack", col="white", stat="identity") +
geom_hline(yintercept=63, linetype="dashed") +
annotation_custom(grobTree(textGrob("Target: 63", x=0.5, y=0.5, hjust=-0.2,
gp=gpar(fontsize=8)))) +
theme_classic() +
facet_wrap(~study_site) +
coord_flip() +
theme(strip.background = element_blank(),
# strip.text.x = element_blank(), # remove facet titles
panel.spacing = unit(2, "lines")) +  # increase space between facets
labs(title = "",
x = "Participant age",
y = "N",
fill = element_blank()) +
theme(legend.position = "bottom",
# legend.title = element_text(size = 8),
legend.text = element_text(size = 10),
legend.justification = "center") +
# change legend order
theme(plot.title = element_text(size = 14),
axis.title.x = element_text(size=12, face="bold"),
axis.title.y = element_text(size=12, face="bold"),
axis.text.x = element_text(size = 8, angle=0, hjust = 1),
axis.text.y = element_text(size= 8))
ggsave(sex_page_plt2, filename = "../output/figs/1a_participant_age.pdf",
height=6, width=8, dpi=300,
bg="#FFFFFF")
sex_page_plt2
#| label: fig-participant-summary-literacy
#| fig-cap: "Literacy level"
#| include: true
#| warning: false
# read_write by age
literacy_page <- participants %>%
group_by(read_write, participant_age, study_site) %>%
dplyr::summarise(total = n(), .groups = "drop") %>%
na.omit()
literacy_page_plt <- fun_literacy_plot(literacy_page)
ggsave(literacy_page_plt, filename = "../output/figs/1a_participant_literate.pdf",
height=6, width=8, dpi=300,
bg="#FFFFFF")
literacy_page_plt
#| label: fig-participant-summary-enrolledsch
#| fig-cap: "Participant currently enrolled in school"
#| include: true
#| warning: false
# enrolled_school by age, "Currently enrolled in school"
enrolledsch_page <- participants %>%
group_by(enrolled_school, participant_age, study_site) %>%
dplyr::summarise(total = n(), .groups = "drop") %>%
na.omit()
enrolledsch_page_plt <- fun_schenrolled_plot(enrolledsch_page)
ggsave(enrolledsch_page_plt, filename = "../output/figs/1a_participant_enrolledschool.pdf",
height=6, width=8, dpi=300,
bg="#FFFFFF")
enrolledsch_page_plt
#| label: fig-participant-summary-educationlevel
#| fig-cap: "Participant education level"
#| include: false
#| warning: false
# highest_educ by age <- "Highest education level attained"
highesteduc_page <- participants %>%
group_by(highest_educ, participant_age, study_site) %>%
dplyr::summarise(total = n(), .groups = "drop") %>%
na.omit()
highesteduc_page_plt <- fun_highesteduc_plot(highesteduc_page)
ggsave(highesteduc_page_plt, filename = "../output/figs/1a_participant_educlevel.pdf",
height=6, width=8, dpi=300,
bg="#FFFFFF")
highesteduc_page_plt
#| label: fig-participant-summary-occupation
#| fig-cap: "Participant ccupation"
#| include: true
#| warning: false
# occupation by age <- "Occupation"
occupation_page <- participants %>%
group_by(occupation, participant_age, study_site) %>%
dplyr::summarise(total = n(), .groups = "drop") %>%
na.omit()
occupation_page_plt <- fun_occupation_plot(occupation_page)
ggsave(occupation_page_plt, filename = "../output/figs/1a_participant_occupation.pdf",
height=6, width=8, dpi=300,
bg="#FFFFFF")
occupation_page_plt
#| label: tbl-contact-characteristics
#| tbl-cap: "Characteristics of contacts"
#| warning:  false
#| include: false
tot_contacts <- nrow(contacts)
tot_rural_contacts <- nrow(contacts %>% filter(study_site == "Rural"))
tot_urban_contacts <- nrow(contacts %>% filter(study_site == "Urban"))
label(contacts$contact_sex) <- "Contact sex"
label(contacts$contact_age) <- "Contact age"
label(contacts$contact_mask) <- "Was the mask wearing a contact?"
label(contacts$known_contact) <- "How long have you known this contact?"
label(contacts$duration_contact) <- "How long did the contact last?"
label(contacts$frequency_contact) <- "How many times do you have a contact with this person?"
label(contacts$where_contact) <- "Where did the contact occur?"
label(contacts$hh_membership) <- "Is this a member of your household?"
label(contacts$hh_member_relationship) <- "Relationship to household member"
# summary table for rural contacts
table2 <- contacts %>%
dplyr::select(study_site, contact_age, contact_sex,contact_mask, known_contact,
hh_membership, duration_contact, frequency_contact, where_contact) %>%
#  hh_member_relationship,
tbl_summary(by = study_site,
percent = "col",
digits = all_categorical() ~ 0,
missing = "ifany") %>%
add_overall() %>%
bold_labels() %>%
modify_header(label = "")
# modify_spanning_header(c("stat_1", "stat_2", "stat_3") ~ "**Survey round**")
# %>% modify_caption("**Table 2: Contact distribution by covariates in Mozambique**")
table2
#|  label: overall-contacts-code
#|  echo: false
#|  warning: false
# merge participant and contact data
df_contact <- contacts %>%
dplyr::select(-study_site) %>%
left_join(participants, by=("rec_id"))
# rural contacts
df_contact_rural <- df_contact %>%
dplyr::filter(study_site == "Rural")
# urban contacts
df_contact_urban <- df_contact %>%
dplyr::filter(study_site == "Urban")
# contacts by site
contacts_site <- df_contact %>%
dplyr::group_by(rec_id, study_site) %>%
dplyr::summarize(num_contacts = n(), .groups = "drop")
# median (IQR) limits
q <- c(.25, .5, .75)
median_contacts_site <- contacts_site %>%
dplyr::group_by(study_site) %>%
dplyr::summarize(q25 = quantile(num_contacts, probs = q[1]),
q50 = quantile(num_contacts, probs = q[2]),
q75 = quantile(num_contacts, probs = q[3]),
.groups = "drop")
mean_contacts_site <- contacts_site %>%
dplyr::group_by(study_site) %>%
dplyr::summarize(mean = round(mean(num_contacts),1),
.groups = "drop")
ci_contacts_rural <- contacts_site %>%
dplyr::filter(study_site == "Rural")
ci_contacts_rural <- lm(num_contacts ~ 1, ci_contacts_rural)
ci_contacts_rural <- as.data.frame(round(confint(ci_contacts_rural), 1))
ci_contacts_urban <- contacts_site %>%
dplyr::filter(study_site == "Urban")
ci_contacts_urban <- lm(num_contacts ~ 1, ci_contacts_urban)
ci_contacts_urban <- as.data.frame(round(confint(ci_contacts_urban), 1))
#| label: fig-contact-distribution-overall
#| fig-cap: "Overall distribution of contacts over two days by site."
#| warning: false
#| echo: false
# The mean (95% CI) contacts for the rural and urban sites was `r paste(mean_contacts_site$mean[1], " (95% CI ", ci_contacts_rural$`2.5 %`,"-",ci_contacts_rural$`97.5 %`,")", sep="")` and `r paste(mean_contacts_site$mean[2], " (95% CI ", ci_contacts_urban$`2.5 %`,"-",ci_contacts_urban$`97.5 %`,")", sep="")`, respectively. The rural area thus reported higher number of contacts compared to the urban area.
# histograms
hist_rural <- contacts_site %>%
dplyr::filter(study_site == "Rural") %>%
plotly::plot_ly(x=~num_contacts, colors="#a6611a") %>%
add_lines(y = range(0:100),
x = mean_contacts_site$mean[1], #,mean(contacts_site$num_contacts),
line = list(color = "black"),
showlegend = FALSE) %>%
add_annotations(x = mean_contacts_site$mean[1],
y = 80,
text = paste(mean_contacts_site$mean[1],
" (95% CI ", ci_contacts_rural$`2.5 %`,"-",
ci_contacts_rural$`97.5 %`,")", sep=""),
showarrow = F, xanchor = "left") %>%
layout(xaxis = list(title = "Num of contacts")) %>%
add_histogram(name="Rural")
# hist_rural
hist_urban <- contacts_site %>%
dplyr::filter(study_site == "Urban") %>%
plotly::plot_ly(x=~num_contacts, colors="#018571") %>%
add_lines(y = range(0:100),
x = mean_contacts_site$mean[2], #,mean(contacts_site$num_contacts),
line = list(color = "black"),
showlegend = FALSE) %>%
add_annotations(x = mean_contacts_site$mean[2],
y = 90,
text = paste(mean_contacts_site$mean[2],
" (95% CI ", ci_contacts_urban$`2.5 %`,"-",
ci_contacts_urban$`97.5 %`,")", sep=""),
showarrow = F, xanchor = "left") %>%
layout(xaxis = list(title = "Num of contacts")) %>%
add_histogram(name="Urban")
subplot(hist_rural, hist_urban, nrows=2, shareX = TRUE)
#| echo: false
#| warning: false
#| include: false
# number of contacts per participant by study day
# dplyr::filter by contact day
df_contact_d1 <- df_contact %>%
dplyr::filter(study_day==1)
df_contact_d2 <- df_contact %>%
dplyr::filter(study_day==2)
# day 1 overall contacts per person
day1_num_contacts <- df_contact_d1 %>%
dplyr::group_by(rec_id, study_site) %>%
dplyr::summarize(num_contacts = n()) %>%
dplyr::select(rec_id, num_contacts)
df_contact_d1 <- left_join(df_contact_d1, day1_num_contacts, by="rec_id" )
# day 2 overall contacts per person
day2_num_contacts <- df_contact_d2 %>%
dplyr::group_by(rec_id, study_site) %>%
dplyr::summarize(num_contacts = n()) %>%
dplyr::select(rec_id, num_contacts)
df_contact_d2 <- left_join(df_contact_d2, day2_num_contacts, by="rec_id" )
#| label: tbl-rural-contact-table
#| tbl-cap: "Rural contacts"
#| warning: false
#| include: false
### Rural contacts
# @tbl-rural-contact-table shows a the median (IQR) contacts in the rural area on day 1 and day 2 separately.
# table of contacts by day of study: both days, day 1 and day 2
list <- list(0)  ## empty list
## specify participant characteristic stratification for cross tabs/analysis
variables <- data.frame(var=c("participant_sex","participant_age",
"hh_membership","occupation", "weekday", "enrolled_school",
"touch_contact", "where_contact", "cnt_home", "cnt_school",
"cnt_work", "cnt_otherplace", "frequency_contact",
"known_contact", "contact_mask2", "ari_symptom", "age_symptom"),
# "hh_member_relationship",
name=c("Sex", "Age", "Household membership", "Occupation", "Weekday/Weekend",
"Enrolled in school", "Did you touch?", "Contact location",
"Contact at home", "Contact at work",
"Contact at school", "Contact in other locations",
"Frequency of contact", "Do you know the contact?",
"Contact wearing mask", "ARI symptoms", "AGE symptoms")) %>%
#  "Relationship to household member",
mutate(var = as.character(var),
name = as.character(name))
for (i in 1:nrow(variables)){
x <- df_contact_rural[,variables$var[[i]]]
# include another variable n as the number of participants per strata
variables$var[[i]]
# Number and proportion of contacts in each strata
t0 <- as.data.frame(cbind(table(x), # Total
round(prop.table(table(x))*100, digits=0) # Proportion
)) # number of participants
colnames(t0)[1:2] <- c("Total","Col")
Tot <- rep("",5)
# Median contacts for day 1
t1 <- df_contact_d1 %>%
dplyr::filter(study_site == "Rural") %>%
# since this is total contacts per person, keep only 1 distinct record
distinct(rec_id, .keep_all = TRUE) %>%
dplyr::group_by(.dots = variables$var[[i]]) %>%
# na.omit() %>%
do(data.frame(t(quantile(.$num_contacts, na.rm=TRUE, probs=c(0.25,0.5,0.75))))) # Median and IQR
t1$med_contact <- as.character(paste(t1$X50.," (",t1$X25.,"-",t1$X75.,")",sep="")) # Formatting for export
# Median contacts for day 2
t2 <- df_contact_d2 %>%
dplyr::filter(study_site == "Rural") %>%
# since this is total contacts per person, keep only 1 distinct record
distinct(rec_id, .keep_all = TRUE) %>%
dplyr::group_by(.dots = variables$var[[i]]) %>%
# na.omit() %>%
do(data.frame(t(quantile(.$num_contacts, na.rm=TRUE, probs=c(0.25,0.5,0.75))))) # Median and IQR
t2$med_contact <- as.character(paste(t2$X50.," (",t2$X25.,"-",t2$X75.,")",sep="")) # Formatting for export
# Bind columns together and select relevant columns
t0<-qpcR:::cbind.na(t0, t1$med_contact, t2$med_contact)
# convert to numerical and round off?
t0<- t0[,c(1,2,3,4)]
# rename total column
t0$Total <- paste(t0$Total," (","", t0$Col,")",sep="")
t0 <- t0[,c(1,3,4)]
t0[,1]<-as.character(t0[,1])
t0[,2]<-as.character(t0[,2])
t0<-rbind(Tot, t0)
rownames(t0)[1]<-variables$name[[i]]
list[[i]] <- t0
}
